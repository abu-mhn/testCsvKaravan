- rest:
    id: rest-0b05
    path: /eccsmobileapi/api/Kiosk/v2/
    post:
      - id: post-347b
        path: /transactions
        to: direct:health-kiosk-v2
- route:
    id: route-5003
    nodePrefixId: route-cfb
    from:
      id: from-5eba
      uri: direct
      parameters:
        name: health-kiosk-v2
      steps:
        - setProperty:
            id: setProperty-8017
            name: payload
            expression:
              simple:
                id: simple-7b8a
                expression: ${body}
        - process:
            id: process-dd51
            ref: DateTime
        - setProperty:
            id: setProperty-4be6
            name: timeLog
            expression:
              simple:
                id: simple-91f9
                expression: ${body}
        - setBody:
            id: setBody-3d68
            expression:
              simple:
                id: simple-a68f
                expression: ${exchangeProperty.payload}
        - setProperty:
            id: setProperty-ae3e
            name: validClientId
            expression:
              simple:
                id: simple-436a
                expression: "{{valid.clientId}}"
        - setProperty:
            id: setProperty-8394
            name: validClientApiKey
            expression:
              simple:
                id: simple-8fe4
                expression: "{{valid.clientApiKey}}"
        - setHeader:
            id: setHeader-91d0
            name: payloadType
            expression:
              simple:
                id: simple-4923
                expression: Early
        - process:
            id: process-cf18
            ref: AuthorizationProcessor
        - choice:
            id: choice-6018
            when:
              - id: when-c700
                expression:
                  simple:
                    id: simple-c254
                    expression: ${header.CamelHttpResponseCode} != 200
                steps:
                  - setProperty:
                      id: setProperty-53fb
                      name: responseCode
                      expression:
                        simple:
                          id: simple-3394
                          expression: ${body}
              - id: when-c9b8
                expression:
                  simple:
                    id: simple-265d
                    expression: ${header.CamelHttpResponseCode} == 200
                steps:
                  - setBody:
                      id: setBody-d8b4
                      expression:
                        simple:
                          id: simple-a5ba
                          expression: ${exchangeProperty.payload}
                  - process:
                      id: process-6c1d
                      ref: PayloadValidatorProcessor
                  - choice:
                      id: choice-1844
                      when:
                        - id: when-d442
                          expression:
                            simple:
                              id: simple-a459
                              expression: ${header.CamelHttpResponseCode} != 200
                          steps:
                            - setProperty:
                                id: setProperty-63e4
                                name: responseCode
                                expression:
                                  simple:
                                    id: simple-d005
                                    expression: ${body}
                        - id: when-9ea1
                          expression:
                            simple:
                              id: simple-5c90
                              expression: ${header.CamelHttpResponseCode} == 200
                          steps:
                            - process:
                                id: process-36c2
                                ref: GetDeviceProcessor
                            - choice:
                                id: choice-f5cd
                                when:
                                  - id: when-2cce
                                    expression:
                                      simple:
                                        id: simple-f337
                                        expression: ${header.CamelHttpResponseCode} != 200
                                    steps:
                                      - setProperty:
                                          id: setProperty-7ce8
                                          name: responseCode
                                          expression:
                                            simple:
                                              id: simple-26a5
                                              expression: ${body}
                                  - id: when-4670
                                    expression:
                                      simple:
                                        id: simple-bb59
                                        expression: ${header.CamelHttpResponseCode} == 200
                                    steps:
                                      - unmarshal:
                                          id: unmarshal-928d
                                          json:
                                            id: json-0998
                                      - setProperty:
                                          id: setProperty-0986
                                          name: managingOrganization
                                          expression:
                                            simple:
                                              id: simple-956b
                                              expression: >-
                                                ${body[entry][0][resource][owner][reference]}
                                      - setProperty:
                                          id: setProperty-e23e
                                          name: deviceName
                                          expression:
                                            simple:
                                              id: simple-6021
                                              expression: >-
                                                ${body[entry][0][resource][deviceName][0][name]}
                                      - setProperty:
                                          id: setProperty-9c2e
                                          name: idFhirDevice
                                          expression:
                                            simple:
                                              id: simple-cde1
                                              expression: >-
                                                Device/${body[entry][0][resource][id]}/_history/${body[entry][0][resource][meta][versionId]}
                                      - setBody:
                                          id: setBody-2b6d
                                          expression:
                                            simple:
                                              id: simple-4fbe
                                              expression: ${exchangeProperty.payload}
                                      - unmarshal:
                                          id: unmarshal-da55
                                          json:
                                            id: json-6c79
                                      - setProperty:
                                          id: setProperty-c4dc
                                          name: patientJson
                                          expression:
                                            js:
                                              id: js-ee65
                                              expression: "let idNumber = body.sfz.idnumber;\r\nlet patientName = body.sfz.name;\r\nlet genderCode = body.sfz.sex;\r\nlet birthday = body.sfz.birthday;\r\nlet nation = body.sfz.nation;\r\nlet managingOrganization = exchange.getProperty(\"managingOrganization\");\r\n\r\nlet gender;\r\n\r\nif (genderCode === \"M\" || genderCode === \"Male\" || genderCode === \"male\") {\r\n    gender = \"male\";\r\n} else if (genderCode === \"F\" || genderCode === \"Female\" || genderCode === \"female\") {\r\n    gender = \"female\";\r\n} else {\r\n    gender = \"unknown\";\r\n}\r\n\r\nfunction isValidMyKad(myKad) {\r\n    // Remove any non-digit characters (spaces, hyphens, etc.)\r\n    const cleanedMyKad = myKad.replace(/\\D/g, '');\r\n\r\n    // Check if the cleaned myKad number is exactly 12 digits\r\n    return cleanedMyKad.length === 12 && !isNaN(cleanedMyKad);\r\n}\r\n\r\nlet isStringNum = isValidMyKad(idNumber);\r\n\r\nfunction isValidDateOfBirth(dob) {\r\n    // Define a regex pattern for the \"day-month-year\" format\r\n    const pattern = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2]|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|1[0-2])-(\\d{4}|\\d{2})$/i;\r\n\r\n    // Check if the dob matches the pattern\r\n    if (!pattern.test(dob)) {\r\n        return false;\r\n    }\r\n\r\n    // Split the dob into components\r\n    const [day, month, year] = dob.split('-');\r\n\r\n    // Check if the day is valid for the month\r\n    const monthIndex = month.toUpperCase() === 'JAN' ? 0 :\r\n                       month.toUpperCase() === 'FEB' ? 1 :\r\n                       month.toUpperCase() === 'MAR' ? 2 :\r\n                       month.toUpperCase() === 'APR' ? 3 :\r\n                       month.toUpperCase() === 'MAY' ? 4 :\r\n                       month.toUpperCase() === 'JUN' ? 5 :\r\n                       month.toUpperCase() === 'JUL' ? 6 :\r\n                       month.toUpperCase() === 'AUG' ? 7 :\r\n                       month.toUpperCase() === 'SEP' ? 8 :\r\n                       month.toUpperCase() === 'OCT' ? 9 :\r\n                       month.toUpperCase() === 'NOV' ? 10 :\r\n                       month.toUpperCase() === 'DEC' ? 11 : parseInt(month) - 1;\r\n\r\n    const yearValue = year.length === 2 ? parseInt(year) + 2000 : parseInt(year);\r\n\r\n    // Create a date object and check if it matches the input\r\n    const date = new Date(yearValue, monthIndex, day);\r\n    return date.getDate() === parseInt(day) && date.getMonth() === monthIndex && date.getFullYear() === yearValue;\r\n}\r\n\r\nlet isValidDoB = isValidDateOfBirth(birthday);\r\n\r\nlet idNum = processIdNumber(idNumber);\r\n\r\nfunction extractBirthdate(idCardNumber) {\r\n    if (!idCardNumber || idCardNumber.length < 6) {\r\n        throw new Error(\"Invalid idCardNumber provided\");\r\n    }\r\n    const year = idCardNumber.slice(0, 2);\r\n    const month = idCardNumber.slice(2, 4);\r\n    const day = idCardNumber.slice(4, 6);\r\n\r\n    const currentYear = new Date().getFullYear() % 100;\r\n    const fullYear = year <= currentYear ? `20${year}` : `19${year}`;\r\n\r\n    const birthdate = `${fullYear}-${month}-${day}`;\r\n\r\n    return birthdate;\r\n}\r\n\r\nfunction extractBirthday(birthday) {\r\n    let [day, month, year] = birthday.split(\"-\");\r\n\r\n    let monthToNumber;\r\n    const monthMap = {\r\n        \"JAN\": \"01\", \"FEB\": \"02\", \"MAR\": \"03\", \"APR\": \"04\", \"MAY\": \"05\",\r\n        \"JUN\": \"06\", \"JUL\": \"07\", \"AUG\": \"08\", \"SEP\": \"09\", \"OCT\": \"10\",\r\n        \"NOV\": \"11\", \"DEC\": \"12\"\r\n    };\r\n\r\n    if (month.length === 2) {\r\n        monthToNumber = month; // Use numeric month if it's already in that format\r\n    } else {\r\n        monthToNumber = monthMap[month.toUpperCase()];\r\n        if (!monthToNumber) {\r\n            throw new Error(\"Invalid month format\");\r\n        }\r\n    }\r\n\r\n    const shortYear = year.length === 4 ? year.slice(-2) : year;\r\n    const currentYearLastTwoDigits = new Date().getFullYear() % 100;\r\n    const fullYear = shortYear <= currentYearLastTwoDigits ? `20${shortYear}` : `19${shortYear}`;\r\n\r\n    const birthdate = `${fullYear}-${monthToNumber}-${day}`;\r\n\r\n    return birthdate;\r\n}\r\n\r\nfunction isMalaysian(nation) {\r\n    return String(nation).toLowerCase() === 'malaysia' || String(nation).toLowerCase() === 'malaysian';\r\n}\r\n\r\nlet birthDate;\r\n\r\nif (!isValidDoB && isStringNum) {\r\n    birthDate = extractBirthdate(idNumber); // Fixed: Use idNumber instead of idCardNumber\r\n} else if (isValidDoB) {\r\n    birthDate = extractBirthday(birthday);\r\n}\r\n\r\nfunction processIdNumber(idNumber) {\r\n    // Check if it contains a hyphen\r\n    if (idNumber.includes('-')) {\r\n        // Split by hyphen and join without it\r\n        const result = idNumber.split('-').join('');\r\n        return result;\r\n    }\r\n    return idNumber; // Return the original ID if no hyphen is present\r\n}\r\n\r\nlet jsonId;\r\n\r\nif (isStringNum && (isMalaysian(nation) || !isMalaysian(nation))) {\r\n    jsonId = {\r\n        \"use\": \"official\",\r\n        \"system\": \"http://fhir.hie.moh.gov.my/sid/my-kad-no\",\r\n        \"value\": idNum\r\n    };\r\n} else if (!isStringNum && (isMalaysian(nation) || !isMalaysian(nation))) {\r\n    jsonId = {\r\n        \"use\": \"official\",\r\n        \"system\": \"http://fhir.hie.moh.gov.my/sid/passport-no\",\r\n        \"value\": idNum\r\n    };\r\n}\r\n\r\nlet jsonstring = {\r\n    \"resourceType\": \"Bundle\",\r\n    \"type\": \"transaction\",\r\n    \"entry\": [\r\n        {\r\n            \"fullUrl\": \"https://veinscdr.mhnexus.com/baseR4/Patient\",\r\n            \"request\": {\r\n                \"method\": \"POST\"\r\n            },\r\n            \"resource\": {\r\n                \"resourceType\": \"Patient\",\r\n                \"meta\": {\r\n                    \"source\": \"http://provider.hie.moh.gov.my\",\r\n                    \"profile\": [\r\n                        \"http://fhir.hie.moh.gov.my/StructureDefinition/Patient-my-core\"\r\n                    ]\r\n                },\r\n                \"identifier\": [\r\n                    jsonId\r\n                ],\r\n                \"active\": true,\r\n                \"name\": [\r\n                    {\r\n                        \"use\": \"official\",\r\n                        \"text\": patientName,\r\n                        \"given\": [\r\n                            patientName\r\n                        ]\r\n                    }\r\n                ],\r\n                \"gender\": gender,\r\n                \"birthDate\": birthDate,\r\n                \"managingOrganization\": {\r\n                    \"reference\": managingOrganization\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\njsonstring = JSON.stringify(jsonstring);\r\n"
                                      - setBody:
                                          id: setBody-a138
                                          expression:
                                            simple:
                                              id: simple-ad71
                                              expression: ${exchangeProperty.payload}
                                      - process:
                                          id: process-4d87
                                          ref: GetIdNumberProcessor
                                      - choice:
                                          id: choice-57fa
                                          when:
                                            - id: when-a903
                                              expression:
                                                simple:
                                                  id: simple-091e
                                                  expression: ${header.total} == 0
                                              steps:
                                                - setBody:
                                                    id: setBody-f5fb
                                                    expression:
                                                      simple:
                                                        id: simple-4c51
                                                        expression: ${exchangeProperty.patientJson}
                                                - setHeader:
                                                    id: setHeader-81dc
                                                    name: payloadType
                                                    expression:
                                                      simple:
                                                        id: simple-fcf9
                                                        expression: Patient
                                                - process:
                                                    id: process-7fd2
                                                    ref: FhirPostJsonProcessor
                                                - choice:
                                                    id: choice-8978
                                                    when:
                                                      - id: when-598b
                                                        expression:
                                                          simple:
                                                            id: simple-0aab
                                                            expression: ${header.CamelHttpResponseCode} != 200
                                                        steps:
                                                          - setProperty:
                                                              id: setProperty-627b
                                                              name: responseCode
                                                              expression:
                                                                simple:
                                                                  id: simple-ec01
                                                                  expression: ${body}
                                                      - id: when-d4db
                                                        expression:
                                                          simple:
                                                            id: simple-56b0
                                                            expression: ${header.CamelHttpResponseCode} == 200
                                                        steps:
                                                          - unmarshal:
                                                              id: unmarshal-e9e0
                                                              json:
                                                                id: json-7cff
                                                          - setProperty:
                                                              id: setProperty-38c8
                                                              name: patientId
                                                              expression:
                                                                simple:
                                                                  id: simple-1b21
                                                                  expression: ${body[entry][0][response][location]}
                                                          - setBody:
                                                              id: setBody-cdb7
                                                              expression:
                                                                simple:
                                                                  id: simple-b3b4
                                                                  expression: ${exchangeProperty.payload}
                                                          - unmarshal:
                                                              id: unmarshal-b59d
                                                              json:
                                                                id: json-a574
                                                          - setProperty:
                                                              id: setProperty-aa81
                                                              name: observationJson
                                                              expression:
                                                                js:
                                                                  id: js-1dde
                                                                  expression: >-
                                                                    let patientId =
                                                                    exchange.getProperty("patientId");

                                                                    let deviceName =
                                                                    exchange.getProperty("deviceName");

                                                                    let idFhirDevice =
                                                                    exchange.getProperty("idFhirDevice");


                                                                    let height = body.hw.height;

                                                                    let weight = body.hw.weight;

                                                                    let waist = body.ytb.waist;

                                                                    let bmi = body.hw.bmi;


                                                                    let zflv = body.fat.zflv;

                                                                    let jcdx = body.fat.jcdx;

                                                                    let tsfl = body.fat.tsfl;

                                                                    let tsflv = body.fat.tsflv;

                                                                    let zfl = body.fat.zfl;

                                                                    let jrl = body.fat.jrl;

                                                                    let jrlv = body.fat.jrlv;

                                                                    let gy = body.fat.gy;

                                                                    let qztz = body.fat.qztz;

                                                                    let dbzlv = body.fat.dbzlv;

                                                                    let xbnyl = body.fat.xbnyl;

                                                                    let wxya = body.fat.wxya;

                                                                    let xbnylv = body.fat.xbnylv;

                                                                    let xbwylv = body.fat.xbwylv;

                                                                    let dbz = body.fat.dbz;

                                                                    let gl = body.fat.gl;


                                                                    let bloodHigh = body.blood.high;

                                                                    let bloodLow = body.blood.low;

                                                                    let heartRate = body.blood.rate;

                                                                    let bodyTemperature = body.tiwen;

                                                                    let spo2 = body.spo2.sp;


                                                                    let xtType = body.xt.type;

                                                                    let xtVal = body.xt.value;


                                                                    // Function for getting current time

                                                                    function getCurrentTimeInCustomFormat()
                                                                    {
                                                                        const now = new Date();

                                                                        // Get the components of the current date and time
                                                                        const year = now.getUTCFullYear();
                                                                        const month = String(now.getUTCMonth() + 1).padStart(2, '0'); // Months are 0-based
                                                                        const day = String(now.getUTCDate()).padStart(2, '0');
                                                                        
                                                                        // Calculate the adjusted hours
                                                                        let hours = now.getUTCHours() + 8;
                                                                        let adjustedDay = day;
                                                                        
                                                                        if (hours >= 24) {
                                                                            hours -= 24;
                                                                            adjustedDay = String(parseInt(day) + 1).padStart(2, '0'); // Increment day if hours overflow
                                                                        }
                                                                        hours = String(hours).padStart(2, '0'); // Pad the adjusted hour

                                                                        const minutes = String(now.getUTCMinutes()).padStart(2, '0');
                                                                        const seconds = String(now.getUTCSeconds()).padStart(2, '0');

                                                                        // Offset for timezone (+08:00)
                                                                        const offsetHours = "+08";
                                                                        const offsetMinutes = "00";

                                                                        // Format to match your example (YYYY-MM-DDTHH:mm:ss+08:00)
                                                                        return `${year}-${month}-${adjustedDay}T${hours}:${minutes}:${seconds}${offsetHours}:${offsetMinutes}`;
                                                                    }


                                                                    function isValidFormat(str) {
                                                                        // Updated regex to allow symbols in the second part
                                                                        const regex = /^\d+(\.\d+)?#[^#]+#\d+(\.\d+)?~\d+(\.\d+)?$/;
                                                                        return regex.test(str);
                                                                    }


                                                                    function isNumber(value) {
                                                                        return !isNaN(value) && !isNaN(parseFloat(value));
                                                                    }


                                                                    function isNumberBetween0And2(str) {
                                                                        // Convert the string to a number
                                                                        const num = Number(str);
                                                                        
                                                                        // Check if the conversion is valid and if the number is in the range [0, 2]
                                                                        return !isNaN(num) && num >= 0 && num <= 2;
                                                                    }


                                                                    //main//

                                                                    let entry = [];


                                                                    let antHasMember = [];


                                                                    let antPanel = {
                                                                        "fullUrl": "Observation/ant-panel",
                                                                        "request": {
                                                                            "method": "POST",
                                                                            "url": "Observation/ant-panel"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "ant-panel",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-panel-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "55418-8",
                                                                                        "display": "Anthropometry panel"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "hasMember": antHasMember
                                                                        }
                                                                    }


                                                                    if (isNumber(height) ||
                                                                        isValidFormat(weight) ||
                                                                        isNumber(waist) ||
                                                                        isValidFormat(bmi)
                                                                    ) {
                                                                        entry.push(antPanel);
                                                                    }


                                                                    let vsHasMember = [];


                                                                    let vsPanel = {
                                                                        "fullUrl": "Observation/vs-panel",
                                                                        "request": {
                                                                            "method": "POST",
                                                                            "url": "Observation/vs-panel"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "vs-panel",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-panel-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "85353-1",
                                                                                        "display": "Vital Signs"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "hasMember": vsHasMember
                                                                        }
                                                                    };


                                                                    if (
                                                                        isValidFormat(bloodHigh) ||
                                                                        isValidFormat(bloodLow) ||
                                                                        isValidFormat(heartRate) ||
                                                                        isValidFormat(bodyTemperature) ||
                                                                        isValidFormat(spo2)
                                                                    ) {
                                                                        entry.push(vsPanel);
                                                                    }



                                                                    let gluHasMember = [];


                                                                    let gluPanel = {
                                                                        "fullUrl": "Observation/glu-panel",
                                                                        "request": {
                                                                            "method": "POST",
                                                                            "url": "Observation/glu-panel"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "glu-panel",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-panel-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "41653-7",
                                                                                        "display": "Glucose panel"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "hasMember": gluHasMember
                                                                        }
                                                                    };


                                                                    if (isNumberBetween0And2(xtType) &&
                                                                        isValidFormat(xtVal) &&
                                                                        xtType != null
                                                                    ) {
                                                                        entry.push(gluPanel);
                                                                    }



                                                                    //Anthro//


                                                                    // Split weight if possible

                                                                    let weightValue, weightText, weightLow,
                                                                    weightHigh;

                                                                    if (weight && weight.includes("#")) {
                                                                        let partsWeight = weight.split("#");
                                                                        weightValue = Number(partsWeight[0]);
                                                                        weightText = partsWeight[1];
                                                                        if (partsWeight[2] && partsWeight[2].includes("~")) {
                                                                            let weightRange = partsWeight[2].split("~");
                                                                            weightLow = Number(weightRange[0]);
                                                                            weightHigh = Number(weightRange[1]);
                                                                        }
                                                                    } else {
                                                                        weightValue = weightText = weightLow = weightHigh = null; // Default or error values
                                                                    }


                                                                    // Split BMI if possible

                                                                    let bmiValue, bmiText, bmiLow, bmiHigh;

                                                                    if (bmi && bmi.includes("#")) {
                                                                        let partsBmi = bmi.split("#");
                                                                        bmiValue = Number(partsBmi[0]);
                                                                        bmiText = partsBmi[1];
                                                                        if (partsBmi[2] && partsBmi[2].includes("~")) {
                                                                            let bmiRange = partsBmi[2].split("~");
                                                                            bmiLow = Number(bmiRange[0]);
                                                                            bmiHigh = Number(bmiRange[1]);
                                                                        }
                                                                    } else {
                                                                        bmiValue = bmiText = bmiLow = bmiHigh = null;
                                                                    }


                                                                    let jsonHt = {
                                                                        "fullUrl": "Observation/ht-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "ht-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-height-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "8302-2",
                                                                                        "display": "Height"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": Number(height),
                                                                                "unit": "cm",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "cm"
                                                                            }
                                                                        }
                                                                    }


                                                                    let jsonWt = {
                                                                        "fullUrl": "Observation/wt-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "wt-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-weight-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "29463-7",
                                                                                        "display": "Weight"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": weightValue,
                                                                                "unit": "kg",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "kg"
                                                                            },
                                                                            "referenceRange": {
                                                                                "low": {
                                                                                    "value": weightLow
                                                                                },
                                                                                "high": {
                                                                                    "value": weightHigh
                                                                                }
                                                                            }
                                                                            // ,
                                                                            // "interpretation": [
                                                                            //     {
                                                                            //         "valueCodeableConcept": {
                                                                            //             "text": weightText
                                                                            //         }
                                                                            //     }
                                                                            // ]
                                                                        }
                                                                    }


                                                                    let jsonWst = {
                                                                        "fullUrl": "Observation/wst-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "wst-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-waist-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "8280-0",
                                                                                        "display": "Waist Circumference"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": Number(waist),
                                                                                "unit": "cm",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "cm"
                                                                            }
                                                                        }
                                                                    }


                                                                    let jsonBmi = {
                                                                        "fullUrl": "Observation/bmi-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "bmi-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-bmi-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "39156-5",
                                                                                        "display": "Body mass index (BMI)"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": bmiValue,
                                                                                "unit": "kg/m2",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "kg/m2"
                                                                            },
                                                                            "referenceRange": {
                                                                                "low": {
                                                                                    "value": bmiLow
                                                                                },
                                                                                "high": {
                                                                                    "value": bmiHigh
                                                                                }
                                                                            }
                                                                            // ,
                                                                            // "interpretation": [
                                                                            //     {
                                                                            //         "valueCodeableConcept": {
                                                                            //             "text": bmiText
                                                                            //         }
                                                                            //     }
                                                                            // ]
                                                                        }
                                                                    }


                                                                    if (isNumber(height) ||
                                                                        isValidFormat(weight) == true ||
                                                                        isNumber(waist) ||
                                                                        isValidFormat(bmi) == true) {

                                                                        if (isNumber(height)) {
                                                                            let memberHeight = {
                                                                                "reference": "Observation/ht-obs"
                                                                            };
                                                                            antHasMember.push(memberHeight);
                                                                            entry.push(jsonHt);
                                                                        }

                                                                        if (isValidFormat(weight)) {
                                                                            let memberWeight = {
                                                                                "reference": "Observation/wt-obs"
                                                                            };
                                                                            antHasMember.push(memberWeight);
                                                                            entry.push(jsonWt);
                                                                        }

                                                                        if (isNumber(waist)) {
                                                                            let memberWaist = {
                                                                                "reference": "Observation/wst-obs"
                                                                            };
                                                                            antHasMember.push(memberWaist);
                                                                            entry.push(jsonWst);
                                                                        }

                                                                        if (isValidFormat(bmi)) {
                                                                            let memberBmi = {
                                                                                "reference": "Observation/bmi-obs"
                                                                            };
                                                                            antHasMember.push(memberBmi);
                                                                            entry.push(jsonBmi);
                                                                        }
                                                                    }



                                                                    //VitalSign//


                                                                    // Split blood pressure high if possible

                                                                    let bloodHighValue, bloodHighText,
                                                                    bloodHighLow, bloodHighHigh;

                                                                    if (bloodHigh &&
                                                                    bloodHigh.includes("#")) {
                                                                        let partsBloodHigh = bloodHigh.split("#");
                                                                        bloodHighValue = Number(partsBloodHigh[0]);
                                                                        bloodHighText = partsBloodHigh[1];
                                                                        if (partsBloodHigh[2] && partsBloodHigh[2].includes("~")) {
                                                                            let bloodHighRange = partsBloodHigh[2].split("~");
                                                                            bloodHighLow = Number(bloodHighRange[0]);
                                                                            bloodHighHigh = Number(bloodHighRange[1]);
                                                                        }
                                                                    } else {
                                                                        bloodHighValue = bloodHighText = bloodHighLow = bloodHighHigh = null;
                                                                    }


                                                                    // Split blood pressure low if possible

                                                                    let bloodLowValue, bloodLowText,
                                                                    bloodLowLow, bloodLowHigh;

                                                                    if (bloodLow && bloodLow.includes("#"))
                                                                    {
                                                                        let partsBloodLow = bloodLow.split("#");
                                                                        bloodLowValue = Number(partsBloodLow[0]);
                                                                        bloodLowText = partsBloodLow[1];
                                                                        if (partsBloodLow[2] && partsBloodLow[2].includes("~")) {
                                                                            let bloodLowRange = partsBloodLow[2].split("~");
                                                                            bloodLowLow = Number(bloodLowRange[0]);
                                                                            bloodLowHigh = Number(bloodLowRange[1]);
                                                                        }
                                                                    } else {
                                                                        bloodLowValue = bloodLowText = bloodLowLow = bloodLowHigh = null;
                                                                    }


                                                                    // Split heart rate if possible

                                                                    let heartRateValue, heartRateText,
                                                                    heartRateLow, heartRateHigh;

                                                                    if (heartRate &&
                                                                    heartRate.includes("#")) {
                                                                        let partsHeartRate = heartRate.split("#");
                                                                        heartRateValue = Number(partsHeartRate[0]);
                                                                        heartRateText = partsHeartRate[1];
                                                                        if (partsHeartRate[2] && partsHeartRate[2].includes("~")) {
                                                                            let heartRateRange = partsHeartRate[2].split("~");
                                                                            heartRateLow = Number(heartRateRange[0]);
                                                                            heartRateHigh = Number(heartRateRange[1]);
                                                                        }
                                                                    } else {
                                                                        heartRateValue = heartRateText = heartRateLow = heartRateHigh = null;
                                                                    }


                                                                    // Split body temperature if possible

                                                                    let bodyTemperatureValue,
                                                                    bodyTemperatureText, bodyTemperatureLow,
                                                                    bodyTemperatureHigh;

                                                                    if (bodyTemperature &&
                                                                    bodyTemperature.includes("#")) {
                                                                        let partsBodyTemperature = bodyTemperature.split("#");
                                                                        bodyTemperatureValue = Number(partsBodyTemperature[0]);
                                                                        bodyTemperatureText = partsBodyTemperature[1];
                                                                        if (partsBodyTemperature[2] && partsBodyTemperature[2].includes("~")) {
                                                                            let bodyTemperatureRange = partsBodyTemperature[2].split("~");
                                                                            bodyTemperatureLow = Number(bodyTemperatureRange[0]);
                                                                            bodyTemperatureHigh = Number(bodyTemperatureRange[1]);
                                                                        }
                                                                    } else {
                                                                        bodyTemperatureValue = bodyTemperatureText = bodyTemperatureLow = bodyTemperatureHigh = null;
                                                                    }


                                                                    // Split spo2 if possible

                                                                    let spo2Value, spo2Text, spo2Low,
                                                                    spo2High;

                                                                    if (spo2 && spo2.includes("#")) {
                                                                        let partsSpo2 = spo2.split("#");
                                                                        spo2Value = Number(partsSpo2[0]);
                                                                        spo2Text = partsSpo2[1];
                                                                        if (partsSpo2[2] && partsSpo2[2].includes("~")) {
                                                                            let spo2Range = partsSpo2[2].split("~");
                                                                            spo2Low = Number(spo2Range[0]);
                                                                            spo2High = Number(spo2Range[1]);
                                                                        }
                                                                    } else {
                                                                        spo2Value = spo2Text = spo2Low = spo2High = null;
                                                                    }


                                                                    let jsonSys = {
                                                                        "fullUrl": "Observation/sys-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "sys-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-systolic-bp-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "8480-6",
                                                                                        "display": "Systolic blood pressure"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": bloodHighValue,
                                                                                "unit": "mm[Hg]",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "mm[Hg]"
                                                                            },
                                                                            "referenceRange": {
                                                                                "low": {
                                                                                    "value": bloodHighLow
                                                                                },
                                                                                "high": {
                                                                                    "value": bloodHighHigh
                                                                                }
                                                                            }
                                                                        }
                                                                    }


                                                                    let jsonDia = {
                                                                        "fullUrl": "Observation/dia-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "dia-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-diastolic-bp-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "8462-4",
                                                                                        "display": "Diastolic blood pressure"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": bloodLowValue,
                                                                                "unit": "mm[Hg]",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "mm[Hg]"
                                                                            },
                                                                            "referenceRange": {
                                                                                "low": {
                                                                                    "value": bloodLowLow
                                                                                },
                                                                                "high": {
                                                                                    "value": bloodLowHigh
                                                                                }
                                                                            }
                                                                        }
                                                                    }


                                                                    let jsonHr = {
                                                                        "fullUrl": "Observation/hr-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "hr-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-heart-rate-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "8867-4",
                                                                                        "display": "Heart rate"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": heartRateValue,
                                                                                "unit": "/min",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "/min"
                                                                            },
                                                                            "referenceRange": {
                                                                                "low": {
                                                                                    "value": heartRateLow
                                                                                },
                                                                                "high": {
                                                                                    "value": heartRateHigh
                                                                                }
                                                                            }
                                                                        }
                                                                    }


                                                                    let jsonTemp = {
                                                                        "fullUrl": "Observation/temp-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "temp-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-body-temp-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "8310-5",
                                                                                        "display": "Body temperature"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": bodyTemperatureValue,
                                                                                "unit": "Cel",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "Cel"
                                                                            }
                                                                        }
                                                                    }


                                                                    let jsonSpo2 = {
                                                                        "fullUrl": "Observation/spo2-obs",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "spo2-obs",
                                                                            "meta": {
                                                                                "source": "http://provider.hie.moh.gov.my",
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-oxygen-sat-my-core"
                                                                                ]
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "59408-5",
                                                                                        "display": "Oxygen Saturation"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": spo2Value,
                                                                                "unit": "%",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "%"
                                                                            }
                                                                        }
                                                                    }


                                                                    if (
                                                                        isValidFormat(bloodHigh) ||
                                                                        isValidFormat(bloodLow) ||
                                                                        isValidFormat(heartRate) ||
                                                                        isValidFormat(bodyTemperature) ||
                                                                        isValidFormat(spo2)
                                                                    ) {
                                                                        if (isValidFormat(bloodHigh)) {
                                                                            let memberSys = {
                                                                                "reference": "Observation/sys-obs"
                                                                            };
                                                                            vsHasMember.push(memberSys);
                                                                            entry.push(jsonSys);
                                                                        }

                                                                        if (isValidFormat(bloodLow)) {
                                                                            let memberDia = {
                                                                                "reference": "Observation/dia-obs"
                                                                            };
                                                                            vsHasMember.push(memberDia);
                                                                            entry.push(jsonDia);
                                                                        }

                                                                        if (isValidFormat(heartRate)) {
                                                                            let memberHr = {
                                                                                "reference": "Observation/hr-obs"
                                                                            };
                                                                            vsHasMember.push(memberHr);
                                                                            entry.push(jsonHr);
                                                                        }

                                                                        if (isValidFormat(bodyTemperature)) {
                                                                            let memberTemp = {
                                                                                "reference": "Observation/temp-obs"
                                                                            };
                                                                            vsHasMember.push(memberTemp);
                                                                            entry.push(jsonTemp);
                                                                        }

                                                                        if (isValidFormat(spo2)) {
                                                                            let memberSpo2 = {
                                                                                "reference": "Observation/spo2-obs"
                                                                            };
                                                                            vsHasMember.push(memberSpo2);
                                                                            entry.push(jsonSpo2);
                                                                        }
                                                                    }



                                                                    //FAT//


                                                                    // Split body fat rate if possible

                                                                    let zflvValue, zflvText, zflvCode,
                                                                    zflvLow, zflvHigh;

                                                                    if (zflv && zflv.includes("#")) {
                                                                        let partsZflv = zflv.split("#");
                                                                        zflvValue = Number(partsZflv[0]);
                                                                        zflvText = partsZflv[1];

                                                                        zflvText = zflvText.charAt(0) !== zflvText.charAt(0).toUpperCase()
                                                                            ? zflvText.charAt(0).toUpperCase() + zflvText.slice(1).toLowerCase()
                                                                            : zflvText;

                                                                        if (partsZflv[2] && partsZflv[2].includes("~")) {
                                                                            let zflvRange = partsZflv[2].split("~");
                                                                            zflvLow = Number(zflvRange[0]);
                                                                            zflvHigh = Number(zflvRange[1]);
                                                                        }
                                                                    } else {
                                                                        zflvValue = zflvText = zflvLow = zflvHigh = null;
                                                                    }


                                                                    // Correct comparison for zflvText

                                                                    if (zflvText === "Low") {
                                                                        zflvCode = "L";
                                                                    } else if (zflvText === "Normal") {
                                                                        zflvCode = "N";
                                                                    } else if (zflvText === "High") {
                                                                        zflvCode = "H";
                                                                    } else {
                                                                        zflvCode = null; // Set to null or a default value if zflvText doesn't match
                                                                    }


                                                                    // Split basal metabolism if possible

                                                                    let jcdxValue, jcdxText, jcdxCode,
                                                                    jcdxLow, jcdxHigh;

                                                                    if (jcdx && jcdx.includes("#")) {
                                                                        let partsJcdx = jcdx.split("#");
                                                                        jcdxValue = Number(partsJcdx[0]);
                                                                        jcdxText = partsJcdx[1];

                                                                        jcdxText = jcdxText.charAt(0) !== jcdxText.charAt(0).toUpperCase()
                                                                            ? jcdxText.charAt(0).toUpperCase() + jcdxText.slice(1).toLowerCase()
                                                                            : jcdxText;

                                                                        if (partsJcdx[2] && partsJcdx[2].includes("~")) {
                                                                            let jcdxRange = partsJcdx[2].split("~");
                                                                            jcdxLow = Number(jcdxRange[0]);  // Convert to decimal
                                                                            jcdxHigh = Number(jcdxRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        jcdxValue = jcdxText = jcdxLow = jcdxHigh = null;
                                                                    }


                                                                    // Correct comparison for jcdxText

                                                                    if (jcdxText === "Low") {
                                                                        jcdxCode = "L";
                                                                    } else if (jcdxText === "Normal") {
                                                                        jcdxCode = "N";
                                                                    } else if (jcdxText === "High") {
                                                                        jcdxCode = "H";
                                                                    } else {
                                                                        jcdxCode = null; // Set to null or a default value if jcdxText doesn't match
                                                                    }


                                                                    // Split body water content if possible

                                                                    let tsflValue, tsflText, tsflCode,
                                                                    tsflLow, tsflHigh;

                                                                    if (tsfl && tsfl.includes("#")) {
                                                                        let partsTsfl = tsfl.split("#");
                                                                        tsflValue = Number(partsTsfl[0]);
                                                                        tsflText = partsTsfl[1];

                                                                        tsflText = tsflText.charAt(0) !== tsflText.charAt(0).toUpperCase()
                                                                            ? tsflText.charAt(0).toUpperCase() + tsflText.slice(1).toLowerCase()
                                                                            : tsflText;

                                                                        if (partsTsfl[2] && partsTsfl[2].includes("~")) {
                                                                            let tsflRange = partsTsfl[2].split("~");
                                                                            tsflLow = Number(tsflRange[0]);  // Convert to decimal
                                                                            tsflHigh = Number(tsflRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        tsflValue = tsflText = tsflLow = tsflHigh = null;
                                                                    }


                                                                    // Correct comparison for tsflText

                                                                    if (tsflText === "Low") {
                                                                        tsflCode = "L";
                                                                    } else if (tsflText === "Normal") {
                                                                        tsflCode = "N";
                                                                    } else if (tsflText === "High") {
                                                                        tsflCode = "H";
                                                                    } else {
                                                                        tsflCode = null; // Set to null or a default value if tsflText doesn't match
                                                                    }


                                                                    // Split body water rate if possible

                                                                    let tsflvValue, tsflvText, tsflvCode,
                                                                    tsflvLow, tsflvHigh;

                                                                    if (tsflv && tsflv.includes("#")) {
                                                                        let partsTsflv = tsflv.split("#");
                                                                        tsflvValue = Number(partsTsflv[0]);
                                                                        tsflvText = partsTsflv[1];

                                                                        tsflvText = tsflvText.charAt(0) !== tsflvText.charAt(0).toUpperCase()
                                                                            ? tsflvText.charAt(0).toUpperCase() + tsflvText.slice(1).toLowerCase()
                                                                            : tsflvText;

                                                                        if (partsTsflv[2] && partsTsflv[2].includes("~")) {
                                                                            let tsflvRange = partsTsflv[2].split("~");
                                                                            tsflvLow = Number(tsflvRange[0]);  // Convert to decimal
                                                                            tsflvHigh = Number(tsflvRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        tsflvValue = tsflvText = tsflvLow = tsflvHigh = null;
                                                                    }


                                                                    // Correct comparison for tsflvText

                                                                    if (tsflvText === "Low") {
                                                                        tsflvCode = "L";
                                                                    } else if (tsflvText === "Normal") {
                                                                        tsflvCode = "N";
                                                                    } else if (tsflvText === "High") {
                                                                        tsflvCode = "H";
                                                                    } else {
                                                                        tsflvCode = null; // Set to null or a default value if tsflvText doesn't match
                                                                    }


                                                                    // Split body fat content if possible

                                                                    let zflValue, zflText, zflCode, zflLow,
                                                                    zflHigh;

                                                                    if (zfl && zfl.includes("#")) {
                                                                        let partsZfl = zfl.split("#");
                                                                        zflValue = Number(partsZfl[0]);
                                                                        zflText = partsZfl[1];

                                                                        zflText = zflText.charAt(0) !== zflText.charAt(0).toUpperCase()
                                                                            ? zflText.charAt(0).toUpperCase() + zflText.slice(1).toLowerCase()
                                                                            : zflText;

                                                                        if (partsZfl[2] && partsZfl[2].includes("~")) {
                                                                            let zflRange = partsZfl[2].split("~");
                                                                            zflLow = Number(zflRange[0]);  // Convert to decimal
                                                                            zflHigh = Number(zflRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        zflValue = zflText = zflLow = zflHigh = null;
                                                                    }


                                                                    // Correct comparison for zflText

                                                                    if (zflText === "Low") {
                                                                        zflCode = "L";
                                                                    } else if (zflText === "Normal") {
                                                                        zflCode = "N";
                                                                    } else if (zflText === "High") {
                                                                        zflCode = "H";
                                                                    } else {
                                                                        zflCode = null; // Set to null or a default value if zflText doesn't match
                                                                    }


                                                                    // Split body muscle content if possible

                                                                    let jrlValue, jrlText, jrlCode, jrlLow,
                                                                    jrlHigh;

                                                                    if (jrl && jrl.includes("#")) {
                                                                        let partsJrl = jrl.split("#");
                                                                        jrlValue = Number(partsJrl[0]);
                                                                        jrlText = partsJrl[1];

                                                                        jrlText = jrlText.charAt(0) !== jrlText.charAt(0).toUpperCase()
                                                                            ? jrlText.charAt(0).toUpperCase() + jrlText.slice(1).toLowerCase()
                                                                            : jrlText;

                                                                        if (partsJrl[2] && partsJrl[2].includes("~")) {
                                                                            let jrlRange = partsJrl[2].split("~");
                                                                            jrlLow = Number(jrlRange[0]);  // Convert to decimal
                                                                            jrlHigh = Number(jrlRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        jrlValue = jrlText = jrlLow = jrlHigh = null;
                                                                    }


                                                                    // Correct comparison for jrlText

                                                                    if (jrlText === "Low") {
                                                                        jrlCode = "L";
                                                                    } else if (jrlText === "Normal") {
                                                                        jrlCode = "N";
                                                                    } else if (jrlText === "High") {
                                                                        jrlCode = "H";
                                                                    } else {
                                                                        jrlCode = null; // Set to null or a default value if jrlText doesn't match
                                                                    }


                                                                    // Split body muscle rate if possible

                                                                    let jrlvValue, jrlvText, jrlvCode,
                                                                    jrlvLow, jrlvHigh;

                                                                    if (jrlv && jrlv.includes("#")) {
                                                                        let partsJrlv = jrlv.split("#");
                                                                        jrlvValue = Number(partsJrlv[0]);
                                                                        jrlvText = partsJrlv[1];

                                                                        jrlvText = jrlvText.charAt(0) !== jrlvText.charAt(0).toUpperCase()
                                                                            ? jrlvText.charAt(0).toUpperCase() + jrlvText.slice(1).toLowerCase()
                                                                            : jrlvText;

                                                                        if (partsJrlv[2] && partsJrlv[2].includes("~")) {
                                                                            let jrlvRange = partsJrlv[2].split("~");
                                                                            jrlvLow = Number(jrlvRange[0]);  // Convert to decimal
                                                                            jrlvHigh = Number(jrlvRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        jrlvValue = jrlvText = jrlvLow = jrlvHigh = null;
                                                                    }


                                                                    // Correct comparison for jrlvText

                                                                    if (jrlvText === "Low") {
                                                                        jrlvCode = "L";
                                                                    } else if (jrlvText === "Normal") {
                                                                        jrlvCode = "N";
                                                                    } else if (jrlvText === "High") {
                                                                        jrlvCode = "H";
                                                                    } else {
                                                                        jrlvCode = null; // Set to null or a default value if jrlvText doesn't match
                                                                    }


                                                                    // Split bone salt if possible

                                                                    let gyValue, gyText, gyCode, gyLow,
                                                                    gyHigh;

                                                                    if (gy && gy.includes("#")) {
                                                                        let partsGy = gy.split("#");
                                                                        gyValue = Number(partsGy[0]);
                                                                        gyText = partsGy[1];

                                                                        gyText = gyText.charAt(0) !== gyText.charAt(0).toUpperCase()
                                                                            ? gyText.charAt(0).toUpperCase() + gyText.slice(1).toLowerCase()
                                                                            : gyText;

                                                                        if (partsGy[2] && partsGy[2].includes("~")) {
                                                                            let gyRange = partsGy[2].split("~");
                                                                            gyLow = Number(gyRange[0]);  // Convert to decimal
                                                                            gyHigh = Number(gyRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        gyValue = gyText = gyLow = gyHigh = null;
                                                                    }


                                                                    // Correct comparison for gyText

                                                                    if (gyText === "Low") {
                                                                        gyCode = "L";
                                                                    } else if (gyText === "Normal") {
                                                                        gyCode = "N";
                                                                    } else if (gyText === "High") {
                                                                        gyCode = "H";
                                                                    } else {
                                                                        gyCode = null; // Set to null or a default value if gyText doesn't match
                                                                    }


                                                                    // Split fat free mass if possible

                                                                    let qztzValue, qztzText, qztzCode,
                                                                    qztzLow, qztzHigh;

                                                                    if (qztz && qztz.includes("#")) {
                                                                        let partsQztz = qztz.split("#");
                                                                        qztzValue = Number(partsQztz[0]);
                                                                        qztzText = partsQztz[1];

                                                                        qztzText = qztzText.charAt(0) !== qztzText.charAt(0).toUpperCase()
                                                                            ? qztzText.charAt(0).toUpperCase() + qztzText.slice(1).toLowerCase()
                                                                            : qztzText;

                                                                        if (partsQztz[2] && partsQztz[2].includes("~")) {
                                                                            let qztzRange = partsQztz[2].split("~");
                                                                            qztzLow = Number(qztzRange[0]);  // Convert to decimal
                                                                            qztzHigh = Number(qztzRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        qztzValue = qztzText = qztzLow = qztzHigh = null;
                                                                    }


                                                                    // Correct comparison for qztzText

                                                                    if (qztzText === "Low") {
                                                                        qztzCode = "L";
                                                                    } else if (qztzText === "Normal") {
                                                                        qztzCode = "N";
                                                                    } else if (qztzText === "High") {
                                                                        qztzCode = "H";
                                                                    } else {
                                                                        qztzCode = null; // Set to null or a default value if qztzText doesn't match
                                                                    }


                                                                    // Split protein rate if possible

                                                                    let dbzlvValue, dbzlvText, dbzlvCode,
                                                                    dbzlvLow, dbzlvHigh;

                                                                    if (dbzlv && dbzlv.includes("#")) {
                                                                        let partsDbzlv = dbzlv.split("#");
                                                                        dbzlvValue = Number(partsDbzlv[0]);
                                                                        dbzlvText = partsDbzlv[1];

                                                                        dbzlvText = dbzlvText.charAt(0) !== dbzlvText.charAt(0).toUpperCase()
                                                                            ? dbzlvText.charAt(0).toUpperCase() + dbzlvText.slice(1).toLowerCase()
                                                                            : dbzlvText;

                                                                        if (partsDbzlv[2] && partsDbzlv[2].includes("~")) {
                                                                            let dbzlvRange = partsDbzlv[2].split("~");
                                                                            dbzlvLow = Number(dbzlvRange[0]);  // Convert to decimal
                                                                            dbzlvHigh = Number(dbzlvRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        dbzlvValue = dbzlvText = dbzlvLow = dbzlvHigh = null;
                                                                    }


                                                                    // Correct comparison for dbzlvText

                                                                    if (dbzlvText === "Low") {
                                                                        dbzlvCode = "L";
                                                                    } else if (dbzlvText === "Normal") {
                                                                        dbzlvCode = "N";
                                                                    } else if (dbzlvText === "High") {
                                                                        dbzlvCode = "H";
                                                                    } else {
                                                                        dbzlvCode = null; // Set to null or a default value if dbzlvText doesn't match
                                                                    }


                                                                    // Split intracellular fluid volume if
                                                                    possible

                                                                    let xbnylValue, xbnylText, xbnylCode,
                                                                    xbnylLow, xbnylHigh;

                                                                    if (xbnyl && xbnyl.includes("#")) {
                                                                        let partsXbnyl = xbnyl.split("#");
                                                                        xbnylValue = Number(partsXbnyl[0]);
                                                                        xbnylText = partsXbnyl[1];

                                                                        xbnylText = xbnylText.charAt(0) !== xbnylText.charAt(0).toUpperCase()
                                                                            ? xbnylText.charAt(0).toUpperCase() + xbnylText.slice(1).toLowerCase()
                                                                            : xbnylText;

                                                                        if (partsXbnyl[2] && partsXbnyl[2].includes("~")) {
                                                                            let xbnylRange = partsXbnyl[2].split("~");
                                                                            xbnylLow = Number(xbnylRange[0]);  // Convert to decimal
                                                                            xbnylHigh = Number(xbnylRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        xbnylValue = xbnylText = xbnylLow = xbnylHigh = null;
                                                                    }


                                                                    // Correct comparison for xbnylText

                                                                    if (xbnylText === "Low") {
                                                                        xbnylCode = "L";
                                                                    } else if (xbnylText === "Normal") {
                                                                        xbnylCode = "N";
                                                                    } else if (xbnylText === "High") {
                                                                        xbnylCode = "H";
                                                                    } else {
                                                                        xbnylCode = null; // Set to null or a default value if xbnylText doesn't match
                                                                    }


                                                                    // Split extracellular fluid volume if
                                                                    possible

                                                                    let wxyaValue, wxyaText, wxyaCode,
                                                                    wxyaLow, wxyaHigh;

                                                                    if (wxya && wxya.includes("#")) {
                                                                        let partsWxya = wxya.split("#");
                                                                        wxyaValue = Number(partsWxya[0]);
                                                                        wxyaText = partsWxya[1];

                                                                        wxyaText = wxyaText.charAt(0) !== wxyaText.charAt(0).toUpperCase()
                                                                            ? wxyaText.charAt(0).toUpperCase() + wxyaText.slice(1).toLowerCase()
                                                                            : wxyaText;

                                                                        if (partsWxya[2] && partsWxya[2].includes("~")) {
                                                                            let wxyaRange = partsWxya[2].split("~");
                                                                            wxyaLow = Number(wxyaRange[0]);  // Convert to decimal
                                                                            wxyaHigh = Number(wxyaRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        wxyaValue = wxyaText = wxyaLow = wxyaHigh = null;
                                                                    }


                                                                    // Correct comparison for wxyaText

                                                                    if (wxyaText === "Low") {
                                                                        wxyaCode = "L";
                                                                    } else if (wxyaText === "Normal") {
                                                                        wxyaCode = "N";
                                                                    } else if (wxyaText === "High") {
                                                                        wxyaCode = "H";
                                                                    } else {
                                                                        wxyaCode = null; // Set to null or a default value if wxyaText doesn't match
                                                                    }


                                                                    // Split intracellular fluid rate if
                                                                    possible

                                                                    let xbnylvValue, xbnylvText, xbnylvCode,
                                                                    xbnylvLow, xbnylvHigh;

                                                                    if (xbnylv && xbnylv.includes("#")) {
                                                                        let partsXbnylv = xbnylv.split("#");
                                                                        xbnylvValue = Number(partsXbnylv[0]);
                                                                        xbnylvText = partsXbnylv[1];

                                                                        xbnylvText = xbnylvText.charAt(0) !== xbnylvText.charAt(0).toUpperCase()
                                                                            ? xbnylvText.charAt(0).toUpperCase() + xbnylvText.slice(1).toLowerCase()
                                                                            : xbnylvText;

                                                                        if (partsXbnylv[2] && partsXbnylv[2].includes("~")) {
                                                                            let xbnylvRange = partsXbnylv[2].split("~");
                                                                            xbnylvLow = Number(xbnylvRange[0]);  // Convert to decimal
                                                                            xbnylvHigh = Number(xbnylvRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        xbnylvValue = xbnylvText = xbnylvLow = xbnylvHigh = null;
                                                                    }


                                                                    // Correct comparison for xbnylvText

                                                                    if (xbnylvText === "Low") {
                                                                        xbnylvCode = "L";
                                                                    } else if (xbnylvText === "Normal") {
                                                                        xbnylvCode = "N";
                                                                    } else if (xbnylvText === "High") {
                                                                        xbnylvCode = "H";
                                                                    } else {
                                                                        xbnylvCode = null; // Set to null or a default value if xbnylvText doesn't match
                                                                    }


                                                                    // Split extracellular fluid rate if
                                                                    possible

                                                                    let xbwylvValue, xbwylvText, xbwylvCode,
                                                                    xbwylvLow, xbwylvHigh;

                                                                    if (xbwylv && xbwylv.includes("#")) {
                                                                        let partsXbwylv = xbwylv.split("#");
                                                                        xbwylvValue = Number(partsXbwylv[0]);
                                                                        xbwylvText = partsXbwylv[1];

                                                                        xbwylvText = xbwylvText.charAt(0) !== xbwylvText.charAt(0).toUpperCase()
                                                                            ? xbwylvText.charAt(0).toUpperCase() + xbwylvText.slice(1).toLowerCase()
                                                                            : xbwylvText;

                                                                        if (partsXbwylv[2] && partsXbwylv[2].includes("~")) {
                                                                            let xbwylvRange = partsXbwylv[2].split("~");
                                                                            xbwylvLow = Number(xbwylvRange[0]);  // Convert to decimal
                                                                            xbwylvHigh = Number(xbwylvRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        xbwylvValue = xbwylvText = xbwylvLow = xbwylvHigh = null;
                                                                    }


                                                                    // Correct comparison for xbwylvText

                                                                    if (xbwylvText === "Low") {
                                                                        xbwylvCode = "L";
                                                                    } else if (xbwylvText === "Normal") {
                                                                        xbwylvCode = "N";
                                                                    } else if (xbwylvText === "High") {
                                                                        xbwylvCode = "H";
                                                                    } else {
                                                                        xbwylvCode = null; // Set to null or a default value if xbwylvText doesn't match
                                                                    }


                                                                    // Split protein if possible

                                                                    let dbzValue, dbzText, dbzCode, dbzLow,
                                                                    dbzHigh;

                                                                    if (dbz && dbz.includes("#")) {
                                                                        let partsDbz = dbz.split("#");
                                                                        dbzValue = Number(partsDbz[0]);
                                                                        dbzText = partsDbz[1];

                                                                        dbzText = dbzText.charAt(0) !== dbzText.charAt(0).toUpperCase()
                                                                            ? dbzText.charAt(0).toUpperCase() + dbzText.slice(1).toLowerCase()
                                                                            : dbzText;

                                                                        if (partsDbz[2] && partsDbz[2].includes("~")) {
                                                                            let dbzRange = partsDbz[2].split("~");
                                                                            dbzLow = Number(dbzRange[0]);  // Convert to decimal
                                                                            dbzHigh = Number(dbzRange[1]); // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        dbzValue = dbzText = dbzLow = dbzHigh = null;
                                                                    }


                                                                    // Correct comparison for dbzText

                                                                    if (dbzText === "Low") {
                                                                        dbzCode = "L";
                                                                    } else if (dbzText === "Normal") {
                                                                        dbzCode = "N";
                                                                    } else if (dbzText === "High") {
                                                                        dbzCode = "H";
                                                                    } else {
                                                                        dbzCode = null; // Set to null or a default value if dbzText doesn't match
                                                                    }


                                                                    // Split bone mass if possible

                                                                    let glValue, glText, glCode, glLow,
                                                                    glHigh;

                                                                    if (gl && gl.includes("#")) {
                                                                        let partsGl = gl.split("#");
                                                                        glValue = Number(partsGl[0]);
                                                                        glText = partsGl[1];

                                                                        glText = glText.charAt(0) !== glText.charAt(0).toUpperCase()
                                                                            ? glText.charAt(0).toUpperCase() + glText.slice(1).toLowerCase()
                                                                            : glText;

                                                                        if (partsGl[2] && partsGl[2].includes("greater than")) {
                                                                            let glRange = partsGl[2].split("greater than");
                                                                            glLow = Number(glRange[1]);  // Convert to decimal
                                                                        }
                                                                    } else {
                                                                        glValue = glText = glLow = glHigh = null;
                                                                    }


                                                                    // Correct comparison for glText

                                                                    if (glText === "Low") {
                                                                        glCode = "L";
                                                                    } else if (glText === "Normal") {
                                                                        glCode = "N";
                                                                    } else if (glText === "High") {
                                                                        glCode = "H";
                                                                    } else {
                                                                        glCode = null; // Set to null or a default value if glText doesn't match
                                                                    }


                                                                    let arrayFatComponent = [];


                                                                    let jsonFatAnalysis = {
                                                                        "fullUrl": "Observation/fat-analysis-example",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "id": "fat-analysis-example",
                                                                            "meta": {
                                                                                "versionId": "7",
                                                                                "lastUpdated": "2024-09-30T10:23:36.259+08:00",
                                                                                "source": "http://provider.hie.moh.gov.my#lF0pLtWSO5iyGMJ4"
                                                                            },
                                                                            "text": {
                                                                                "status": "generated",
                                                                                "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Performed Date</b>: 27-Sep-2024 08:00</p><p><b>Percentage of body fat by Bioelectrical impedance analysis</b>: </p><ul><li><b>Percentage of body fat Measured</b>: 21.7% *High (10.0 - 21.0)</li><li><b>Total metabolism [Mass] 24 hour</b>: 1591.0kcal *Normal (1395.0 - 1705.0)</li><li><b>Body water mass</b>: 42.5kg *Normal (27.0 - 45.4)</li><li><b>Percentage of body water</b>: 57.0% *Normal (50.0 - 65.0)</li><li><b>Body fat [Mass] Calculated</b>: 16.1kg *High (5.4 - 14.7)</li><li><b>Body muscle mass Calculated</b>: 55.7kg *Normal (35.7 - 59.4)</li><li><b>Body muscle percentage - Body muscle mass/Body weight Measured</b>: 74.7% *Normal (50.0 - 65.0)</li><li><b>Bone salt</b>: 2.6kg *Low (2.7 - 3.7)</li><li><b>Fat-free mass (observable entity) </b>: 58.4kg *High (41.0 - 56.8)</li><li><b>Protein rate</b>: 16.0% *High (16.0 - 20.0)</li><li><b>Intracellular fluid [Volume] Estimated</b>: 28.3kg *High (17.9 - 30.1)</li><li><b>Extracellular fluid [Volume] Measured</b>: 8.2kg *High (10.0 - 21.0)</li><li><b>Intracellular fluid rate</b>: 38.0% *Normal (33.0 - 43.0)</li><li><b>Extracellular fluid rate</b>: 19.0% *Normal (17 - 22.0)</li><li><b>Protein</b>: 13.1kg *Normal (8.7 - 14.0)</li><li><b>Visceral fat [Area] Measured</b>: 17.6 *High (8.7 - 14.0)</li><li><b>Body bone mass</b>: 4.1kg *Normal</li></ul></div>"
                                                                            },
                                                                            "status": "final",
                                                                            "category": [
                                                                                {
                                                                                    "coding": [
                                                                                        {
                                                                                            "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                            "code": "vital-signs",
                                                                                            "display": "Vital Signs"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://loinc.org",
                                                                                        "code": "77233-5",
                                                                                        "display": "Percentage of body fat by Bioelectrical impedance analysis"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "component": arrayFatComponent
                                                                        }
                                                                    }


                                                                    let jsonZflv = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://loinc.org",
                                                                                    "code": "41982-0",
                                                                                    "display": "Percentage of body fat Measured"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "ZFLV",
                                                                                    "display": "Body fat rate"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": zflvValue,
                                                                            "unit": "%",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "%"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": zflvCode,
                                                                                        "display": zflvText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": zflvLow
                                                                                },
                                                                                "high": {
                                                                                    "value": zflvHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonJcdx = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://loinc.org",
                                                                                    "code": "41971-3",
                                                                                    "display": "Total metabolism [Mass] 24 hour"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "JCDX",
                                                                                    "display": "Basal metabolism"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": jcdxValue,
                                                                            "unit": "kcal",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kcal"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": jcdxCode,
                                                                                        "display": jcdxText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": jcdxLow
                                                                                },
                                                                                "high": {
                                                                                    "value": jcdxHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonTsfl = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "https://loinc.org",
                                                                                    "code": "101683-1",
                                                                                    "display": "Body water mass"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "TSFL",
                                                                                    "display": "Body water content"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": tsflValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": tsflCode,
                                                                                        "display": tsflText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": tsflLow
                                                                                },
                                                                                "high": {
                                                                                    "value": tsflHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonTsflv = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "https://loinc.org",
                                                                                    "code": "101684-9",
                                                                                    "display": "Percentage of body water"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "TSFLV",
                                                                                    "display": "Body water rate"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": tsflvValue,
                                                                            "unit": "%",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "%"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": tsflvCode,
                                                                                        "display": tsflvText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": tsflvLow
                                                                                },
                                                                                "high": {
                                                                                    "value": tsflvHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonZfl = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://loinc.org",
                                                                                    "code": "73708-0",
                                                                                    "display": "Body fat [Mass] Calculated"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "ZFL",
                                                                                    "display": "Body fat content"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": zflValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": zflCode,
                                                                                        "display": zflText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": zflLow
                                                                                },
                                                                                "high": {
                                                                                    "value": zflHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonJrl = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://loinc.org",
                                                                                    "code": "73965-6",
                                                                                    "display": "Body muscle percentage - Body muscle mass/Body weight Measured"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "JRLV",
                                                                                    "display": "Body muscle rate"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": jrlValue,
                                                                            "unit": "%",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "%"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": jrlCode,
                                                                                        "display": jrlText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": jrlLow
                                                                                },
                                                                                "high": {
                                                                                    "value": jrlHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonJrlv = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://loinc.org",
                                                                                    "code": "73965-6",
                                                                                    "display": "Body muscle percentage - Body muscle mass/Body weight Measured"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "JRLV",
                                                                                    "display": "Body muscle rate"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": jrlvValue,
                                                                            "unit": "%",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "%"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": jrlvCode,
                                                                                        "display": jrlvText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": jrlvLow
                                                                                },
                                                                                "high": {
                                                                                    "value": jrlvHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonGy = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "GY",
                                                                                    "display": "Bone salt"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": gyValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": gyCode,
                                                                                        "display": gyText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": gyLow
                                                                                },
                                                                                "high": {
                                                                                    "value": gyHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonQztz = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://snomed.info/sct",
                                                                                    "code": "248363008",
                                                                                    "display": "Fat-free mass (observable entity) "
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "QZTZ",
                                                                                    "display": "Fat free mass"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": qztzValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": qztzCode,
                                                                                        "display": qztzText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": qztzLow
                                                                                },
                                                                                "high": {
                                                                                    "value": qztzHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonDbzlv = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "DBZLV",
                                                                                    "display": "Protein rate"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": dbzlvValue,
                                                                            "unit": "%",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "%"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": dbzlvCode,
                                                                                        "display": dbzlvText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": dbzlvLow
                                                                                },
                                                                                "high": {
                                                                                    "value": dbzlvHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonXbnyl = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://loinc.org",
                                                                                    "code": "73705-6",
                                                                                    "display": "Intracellular fluid [Volume] Estimated"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "XBNYL",
                                                                                    "display": "Intracellular fluid volume"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": xbnylValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": xbnylCode,
                                                                                        "display": xbnylText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": xbnylLow
                                                                                },
                                                                                "high": {
                                                                                    "value": xbnylHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonWxya = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://loinc.org",
                                                                                    "code": "73706-4",
                                                                                    "display": "Extracellular fluid [Volume] Measured"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "WXYA",
                                                                                    "display": "Extracellular fluid volume"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": wxyaValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": wxyaCode,
                                                                                        "display": wxyaText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": wxyaLow
                                                                                },
                                                                                "high": {
                                                                                    "value": wxyaHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonXbnylv = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "XBNYLV",
                                                                                    "display": "Intracellular fluid rate"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": xbnylvValue,
                                                                            "unit": "%",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "%"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": xbnylvCode,
                                                                                        "display": xbnylvText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": xbnylvLow
                                                                                },
                                                                                "high": {
                                                                                    "value": xbnylvHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonXbwylv = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "XBWYLV",
                                                                                    "display": "Extracellular fluid rate"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": xbwylvValue,
                                                                            "unit": "%",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "%"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": xbwylvCode,
                                                                                        "display": xbwylvText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": xbwylvLow
                                                                                },
                                                                                "high": {
                                                                                    "value": xbwylvHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonDbz = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "DBZ",
                                                                                    "display": "Protein"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": dbzValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": dbzCode,
                                                                                        "display": dbzText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": dbzLow
                                                                                },
                                                                                "high": {
                                                                                    "value": dbzHigh
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    let jsonGl = {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "https://loinc.org",
                                                                                    "code": "101685-6",
                                                                                    "display": "Body bone mass"
                                                                                },
                                                                                {
                                                                                    "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                                    "code": "GL",
                                                                                    "display": "Bone mass"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueQuantity": {
                                                                            "value": glValue,
                                                                            "unit": "kg",
                                                                            "system": "http://unitsofmeasure.org",
                                                                            "code": "kg"
                                                                        },
                                                                        "interpretation": [
                                                                            {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                                        "code": glCode,
                                                                                        "display": glText
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "referenceRange": [
                                                                            {
                                                                                "low": {
                                                                                    "value": glLow
                                                                                }
                                                                            }
                                                                        ]
                                                                    }


                                                                    if (
                                                                        isValidFormat(zflv) ||
                                                                        isValidFormat(jcdx) ||
                                                                        isValidFormat(tsfl) ||
                                                                        isValidFormat(tsflv) ||
                                                                        isValidFormat(zfl) ||
                                                                        isValidFormat(jrl) ||
                                                                        isValidFormat(jrlv) ||
                                                                        isValidFormat(gy) ||
                                                                        isValidFormat(qztz) ||
                                                                        isValidFormat(dbzlv) ||
                                                                        isValidFormat(xbnyl) ||
                                                                        isValidFormat(wxya) ||
                                                                        isValidFormat(xbnylv) ||
                                                                        isValidFormat(xbwylv) ||
                                                                        isValidFormat(dbz) ||
                                                                        isValidFormat(gl)
                                                                    ) {
                                                                        entry.push(jsonFatAnalysis);

                                                                        const components = [
                                                                            { value: zflv, json: jsonZflv },
                                                                            { value: jcdx, json: jsonJcdx },
                                                                            { value: tsfl, json: jsonTsfl },
                                                                            { value: tsflv, json: jsonTsflv },
                                                                            { value: zfl, json: jsonZfl },
                                                                            { value: jrl, json: jsonJrl },
                                                                            { value: jrlv, json: jsonJrlv },
                                                                            { value: gy, json: jsonGy },
                                                                            { value: qztz, json: jsonQztz },
                                                                            { value: dbzlv, json: jsonDbzlv },
                                                                            { value: xbnyl, json: jsonXbnyl },
                                                                            { value: wxya, json: jsonWxya },
                                                                            { value: xbnylv, json: jsonXbnylv },
                                                                            { value: xbwylv, json: jsonXbwylv },
                                                                            { value: dbz, json: jsonDbz },
                                                                            { value: gl, json: jsonGl }
                                                                        ];

                                                                        components.forEach(component => {
                                                                            if (isValidFormat(component.value)) {
                                                                                arrayFatComponent.push(component.json);
                                                                            }
                                                                        });
                                                                    }



                                                                    //glucose//


                                                                    // Split xtVal if possible

                                                                    let xtValValue, xtValText, xtValLow,
                                                                    xtValHigh;

                                                                    if (xtVal && xtVal.includes("#")) {
                                                                        let partsXtVal = xtVal.split("#");
                                                                        xtValValue = Number(partsXtVal[0]);
                                                                        xtValText = partsXtVal[1];
                                                                        if (partsXtVal[2] && partsXtVal[2].includes("~")) {
                                                                            let xtValRange = partsXtVal[2].split("~");
                                                                            xtValLow = Number(xtValRange[0]);
                                                                            xtValHigh = Number(xtValRange[1]);
                                                                        }
                                                                    } else {
                                                                        xtValValue = xtValText = xtValLow = xtValHigh = null; // Default or error values
                                                                    }




                                                                    let xtCode;

                                                                    let xtText;

                                                                    if (xtType == "0") {
                                                                        xtCode = "271062006";
                                                                        xtText = "Fasting blood glucose";
                                                                    } else if (xtType == "1") {
                                                                        xtCode = "703767004";
                                                                        xtText = "One hour after a meal";
                                                                    } else if (xtType == "2") {
                                                                        xtCode = "703768009";
                                                                        xtText = "Two hours after a meal";
                                                                    } else {
                                                                        xtCode = "null";
                                                                        xtText = "null";
                                                                    }


                                                                    let jsonXt = {
                                                                        "fullUrl": "urn:uuid:00000013-0005-0005-0005-000000000002",
                                                                        "request": {
                                                                            "method": "POST"
                                                                        },
                                                                        "resource": {
                                                                            "resourceType": "Observation",
                                                                            "meta": {
                                                                                "profile": [
                                                                                    "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-fasting-glucose-my-core"
                                                                                ],
                                                                                "source": "http://provider.hie.moh.gov.my"
                                                                            },
                                                                            "status": "final",
                                                                            "code": {
                                                                                "coding": [
                                                                                    {
                                                                                        "system": "http://snomed.info/sct",
                                                                                        "code": "271062006",
                                                                                        "display": "Fasting blood glucose"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "subject": {
                                                                                "reference": patientId
                                                                            },
                                                                            "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                            "issued": getCurrentTimeInCustomFormat(),
                                                                            "performer": [
                                                                                {
                                                                                    "reference": idFhirDevice,
                                                                                    "display": deviceName
                                                                                }
                                                                            ],
                                                                            "valueQuantity": {
                                                                                "value": xtValValue,
                                                                                "unit": "mmol/L",
                                                                                "system": "http://unitsofmeasure.org",
                                                                                "code": "mmol/L"
                                                                            },
                                                                            "component": [
                                                                                {
                                                                                    "code": {
                                                                                        "coding": [
                                                                                            {
                                                                                                "system": "http://snomed.info/sct",
                                                                                                "code": "704326004",
                                                                                                "display": "Precondition"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "valueCodeableConcept": {
                                                                                        "coding": [
                                                                                            {
                                                                                                "system": "http://snomed.info/sct",
                                                                                                "code": xtCode,
                                                                                                "display": xtText
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }




                                                                    if (isNumberBetween0And2(xtType) &&
                                                                        isValidFormat(xtVal) &&
                                                                        xtCode != "null" &&
                                                                        xtText != "null"
                                                                    ) {

                                                                        let memberGlucose = {
                                                                            "reference": "Observation/urn:uuid:00000013-0005-0005-0005-000000000002"
                                                                        };

                                                                        gluHasMember.push(memberGlucose);
                                                                        entry.push(jsonXt);
                                                                    }



                                                                    // Create the FHIR bundle

                                                                    let jsonstring = {
                                                                        "resourceType": "Bundle",
                                                                        "type": "transaction",
                                                                        "entry": entry
                                                                    }


                                                                    jsonstring = JSON.stringify(jsonstring);
                                                          - setHeader:
                                                              id: setHeader-f847
                                                              name: payloadType
                                                              expression:
                                                                simple:
                                                                  id: simple-f1f0
                                                                  expression: NewObservation
                                                          - setBody:
                                                              id: setBody-0bd1
                                                              expression:
                                                                simple:
                                                                  id: simple-0f6a
                                                                  expression: ${exchangeProperty.observationJson}
                                                          - process:
                                                              id: process-56eb
                                                              ref: FhirPostMessageProcessor
                                                          - choice:
                                                              id: choice-704d
                                                              when:
                                                                - id: when-74ef
                                                                  expression:
                                                                    simple:
                                                                      id: simple-ebf7
                                                                      expression: ${header.CamelHttpResponseCode} != 200
                                                                  steps:
                                                                    - setProperty:
                                                                        id: setProperty-526e
                                                                        name: responseCode
                                                                        expression:
                                                                          simple:
                                                                            id: simple-ca7b
                                                                            expression: ${body}
                                                                - id: when-a58f
                                                                  expression:
                                                                    simple:
                                                                      id: simple-ba61
                                                                      expression: ${header.CamelHttpResponseCode} == 200
                                                                  steps:
                                                                    - setProperty:
                                                                        id: setProperty-692a
                                                                        name: responseCode
                                                                        expression:
                                                                          simple:
                                                                            id: simple-f60c
                                                                            expression: ${body}
                                          otherwise:
                                            id: otherwise-5549
                                            steps:
                                              - unmarshal:
                                                  id: unmarshal-86e9
                                                  json:
                                                    id: json-4bce
                                              - setProperty:
                                                  id: setProperty-9b18
                                                  name: idGet
                                                  expression:
                                                    simple:
                                                      id: simple-8d32
                                                      expression: Patient/${body[entry][0][resource][id]}
                                              - setBody:
                                                  id: setBody-e019
                                                  expression:
                                                    simple:
                                                      id: simple-74e3
                                                      expression: ${exchangeProperty.payload}
                                              - unmarshal:
                                                  id: unmarshal-156e
                                                  json:
                                                    id: json-28a8
                                              - setProperty:
                                                  id: setProperty-d357
                                                  name: observationJson
                                                  expression:
                                                    js:
                                                      id: js-5c93
                                                      expression: >-
                                                        let patientId =
                                                        exchange.getProperty("idGet");

                                                        let deviceName =
                                                        exchange.getProperty("deviceName");

                                                        let idFhirDevice =
                                                        exchange.getProperty("idFhirDevice");


                                                        let height = body.hw.height;

                                                        let weight = body.hw.weight;

                                                        let waist = body.ytb.waist;

                                                        let bmi = body.hw.bmi;


                                                        let zflv = body.fat.zflv;

                                                        let jcdx = body.fat.jcdx;

                                                        let tsfl = body.fat.tsfl;

                                                        let tsflv = body.fat.tsflv;

                                                        let zfl = body.fat.zfl;

                                                        let jrl = body.fat.jrl;

                                                        let jrlv = body.fat.jrlv;

                                                        let gy = body.fat.gy;

                                                        let qztz = body.fat.qztz;

                                                        let dbzlv = body.fat.dbzlv;

                                                        let xbnyl = body.fat.xbnyl;

                                                        let wxya = body.fat.wxya;

                                                        let xbnylv = body.fat.xbnylv;

                                                        let xbwylv = body.fat.xbwylv;

                                                        let dbz = body.fat.dbz;

                                                        let gl = body.fat.gl;


                                                        let bloodHigh = body.blood.high;

                                                        let bloodLow = body.blood.low;

                                                        let heartRate = body.blood.rate;

                                                        let bodyTemperature = body.tiwen;

                                                        let spo2 = body.spo2.sp;


                                                        let xtType = body.xt.type;

                                                        let xtVal = body.xt.value;


                                                        // Function for getting current time

                                                        function getCurrentTimeInCustomFormat()
                                                        {
                                                            const now = new Date();

                                                            // Get the components of the current date and time
                                                            const year = now.getUTCFullYear();
                                                            const month = String(now.getUTCMonth() + 1).padStart(2, '0'); // Months are 0-based
                                                            const day = String(now.getUTCDate()).padStart(2, '0');
                                                            
                                                            // Calculate the adjusted hours
                                                            let hours = now.getUTCHours() + 8;
                                                            let adjustedDay = day;
                                                            
                                                            if (hours >= 24) {
                                                                hours -= 24;
                                                                adjustedDay = String(parseInt(day) + 1).padStart(2, '0'); // Increment day if hours overflow
                                                            }
                                                            hours = String(hours).padStart(2, '0'); // Pad the adjusted hour

                                                            const minutes = String(now.getUTCMinutes()).padStart(2, '0');
                                                            const seconds = String(now.getUTCSeconds()).padStart(2, '0');

                                                            // Offset for timezone (+08:00)
                                                            const offsetHours = "+08";
                                                            const offsetMinutes = "00";

                                                            // Format to match your example (YYYY-MM-DDTHH:mm:ss+08:00)
                                                            return `${year}-${month}-${adjustedDay}T${hours}:${minutes}:${seconds}${offsetHours}:${offsetMinutes}`;
                                                        }


                                                        function isValidFormat(str) {
                                                            // Updated regex to allow symbols in the second part
                                                            const regex = /^\d+(\.\d+)?#[^#]+#\d+(\.\d+)?~\d+(\.\d+)?$/;
                                                            return regex.test(str);
                                                        }


                                                        function isNumber(value) {
                                                            return !isNaN(value) && !isNaN(parseFloat(value));
                                                        }


                                                        function isNumberBetween0And2(str) {
                                                            // Convert the string to a number
                                                            const num = Number(str);
                                                            
                                                            // Check if the conversion is valid and if the number is in the range [0, 2]
                                                            return !isNaN(num) && num >= 0 && num <= 2;
                                                        }


                                                        //main//

                                                        let entry = [];


                                                        let antHasMember = [];


                                                        let antPanel = {
                                                            "fullUrl": "Observation/ant-panel",
                                                            "request": {
                                                                "method": "POST",
                                                                "url": "Observation/ant-panel"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "ant-panel",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-panel-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "55418-8",
                                                                            "display": "Anthropometry panel"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "hasMember": antHasMember
                                                            }
                                                        }


                                                        if (isNumber(height) ||
                                                            isValidFormat(weight) ||
                                                            isNumber(waist) ||
                                                            isValidFormat(bmi)
                                                        ) {
                                                            entry.push(antPanel);
                                                        }


                                                        let vsHasMember = [];


                                                        let vsPanel = {
                                                            "fullUrl": "Observation/vs-panel",
                                                            "request": {
                                                                "method": "POST",
                                                                "url": "Observation/vs-panel"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "vs-panel",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-panel-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "85353-1",
                                                                            "display": "Vital Signs"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "hasMember": vsHasMember
                                                            }
                                                        };


                                                        if (
                                                            isValidFormat(bloodHigh) ||
                                                            isValidFormat(bloodLow) ||
                                                            isValidFormat(heartRate) ||
                                                            isValidFormat(bodyTemperature) ||
                                                            isValidFormat(spo2)
                                                        ) {
                                                            entry.push(vsPanel);
                                                        }



                                                        let gluHasMember = [];


                                                        let gluPanel = {
                                                            "fullUrl": "Observation/glu-panel",
                                                            "request": {
                                                                "method": "POST",
                                                                "url": "Observation/glu-panel"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "glu-panel",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-panel-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "41653-7",
                                                                            "display": "Glucose panel"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "hasMember": gluHasMember
                                                            }
                                                        };


                                                        if (isNumberBetween0And2(xtType) &&
                                                            isValidFormat(xtVal) &&
                                                            xtType != null
                                                        ) {
                                                            entry.push(gluPanel);
                                                        }



                                                        //Anthro//


                                                        // Split weight if possible

                                                        let weightValue, weightText, weightLow,
                                                        weightHigh;

                                                        if (weight && weight.includes("#")) {
                                                            let partsWeight = weight.split("#");
                                                            weightValue = Number(partsWeight[0]);
                                                            weightText = partsWeight[1];
                                                            if (partsWeight[2] && partsWeight[2].includes("~")) {
                                                                let weightRange = partsWeight[2].split("~");
                                                                weightLow = Number(weightRange[0]);
                                                                weightHigh = Number(weightRange[1]);
                                                            }
                                                        } else {
                                                            weightValue = weightText = weightLow = weightHigh = null; // Default or error values
                                                        }


                                                        // Split BMI if possible

                                                        let bmiValue, bmiText, bmiLow, bmiHigh;

                                                        if (bmi && bmi.includes("#")) {
                                                            let partsBmi = bmi.split("#");
                                                            bmiValue = Number(partsBmi[0]);
                                                            bmiText = partsBmi[1];
                                                            if (partsBmi[2] && partsBmi[2].includes("~")) {
                                                                let bmiRange = partsBmi[2].split("~");
                                                                bmiLow = Number(bmiRange[0]);
                                                                bmiHigh = Number(bmiRange[1]);
                                                            }
                                                        } else {
                                                            bmiValue = bmiText = bmiLow = bmiHigh = null;
                                                        }


                                                        let jsonHt = {
                                                            "fullUrl": "Observation/ht-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "ht-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-height-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "8302-2",
                                                                            "display": "Height"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": Number(height),
                                                                    "unit": "cm",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "cm"
                                                                }
                                                            }
                                                        }


                                                        let jsonWt = {
                                                            "fullUrl": "Observation/wt-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "wt-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-weight-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "29463-7",
                                                                            "display": "Weight"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": weightValue,
                                                                    "unit": "kg",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "kg"
                                                                },
                                                                "referenceRange": {
                                                                    "low": {
                                                                        "value": weightLow
                                                                    },
                                                                    "high": {
                                                                        "value": weightHigh
                                                                    }
                                                                }
                                                                // ,
                                                                // "interpretation": [
                                                                //     {
                                                                //         "valueCodeableConcept": {
                                                                //             "text": weightText
                                                                //         }
                                                                //     }
                                                                // ]
                                                            }
                                                        }


                                                        let jsonWst = {
                                                            "fullUrl": "Observation/wst-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "wst-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-waist-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "8280-0",
                                                                            "display": "Waist Circumference"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": Number(waist),
                                                                    "unit": "cm",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "cm"
                                                                }
                                                            }
                                                        }


                                                        let jsonBmi = {
                                                            "fullUrl": "Observation/bmi-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "bmi-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-bmi-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "39156-5",
                                                                            "display": "Body mass index (BMI)"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": bmiValue,
                                                                    "unit": "kg/m2",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "kg/m2"
                                                                },
                                                                "referenceRange": {
                                                                    "low": {
                                                                        "value": bmiLow
                                                                    },
                                                                    "high": {
                                                                        "value": bmiHigh
                                                                    }
                                                                }
                                                                // ,
                                                                // "interpretation": [
                                                                //     {
                                                                //         "valueCodeableConcept": {
                                                                //             "text": bmiText
                                                                //         }
                                                                //     }
                                                                // ]
                                                            }
                                                        }


                                                        if (isNumber(height) ||
                                                            isValidFormat(weight) == true ||
                                                            isNumber(waist) ||
                                                            isValidFormat(bmi) == true) {

                                                            if (isNumber(height)) {
                                                                let memberHeight = {
                                                                    "reference": "Observation/ht-obs"
                                                                };
                                                                antHasMember.push(memberHeight);
                                                                entry.push(jsonHt);
                                                            }

                                                            if (isValidFormat(weight)) {
                                                                let memberWeight = {
                                                                    "reference": "Observation/wt-obs"
                                                                };
                                                                antHasMember.push(memberWeight);
                                                                entry.push(jsonWt);
                                                            }

                                                            if (isNumber(waist)) {
                                                                let memberWaist = {
                                                                    "reference": "Observation/wst-obs"
                                                                };
                                                                antHasMember.push(memberWaist);
                                                                entry.push(jsonWst);
                                                            }

                                                            if (isValidFormat(bmi)) {
                                                                let memberBmi = {
                                                                    "reference": "Observation/bmi-obs"
                                                                };
                                                                antHasMember.push(memberBmi);
                                                                entry.push(jsonBmi);
                                                            }
                                                        }



                                                        //VitalSign//


                                                        // Split blood pressure high if possible

                                                        let bloodHighValue, bloodHighText,
                                                        bloodHighLow, bloodHighHigh;

                                                        if (bloodHigh &&
                                                        bloodHigh.includes("#")) {
                                                            let partsBloodHigh = bloodHigh.split("#");
                                                            bloodHighValue = Number(partsBloodHigh[0]);
                                                            bloodHighText = partsBloodHigh[1];
                                                            if (partsBloodHigh[2] && partsBloodHigh[2].includes("~")) {
                                                                let bloodHighRange = partsBloodHigh[2].split("~");
                                                                bloodHighLow = Number(bloodHighRange[0]);
                                                                bloodHighHigh = Number(bloodHighRange[1]);
                                                            }
                                                        } else {
                                                            bloodHighValue = bloodHighText = bloodHighLow = bloodHighHigh = null;
                                                        }


                                                        // Split blood pressure low if possible

                                                        let bloodLowValue, bloodLowText,
                                                        bloodLowLow, bloodLowHigh;

                                                        if (bloodLow && bloodLow.includes("#"))
                                                        {
                                                            let partsBloodLow = bloodLow.split("#");
                                                            bloodLowValue = Number(partsBloodLow[0]);
                                                            bloodLowText = partsBloodLow[1];
                                                            if (partsBloodLow[2] && partsBloodLow[2].includes("~")) {
                                                                let bloodLowRange = partsBloodLow[2].split("~");
                                                                bloodLowLow = Number(bloodLowRange[0]);
                                                                bloodLowHigh = Number(bloodLowRange[1]);
                                                            }
                                                        } else {
                                                            bloodLowValue = bloodLowText = bloodLowLow = bloodLowHigh = null;
                                                        }


                                                        // Split heart rate if possible

                                                        let heartRateValue, heartRateText,
                                                        heartRateLow, heartRateHigh;

                                                        if (heartRate &&
                                                        heartRate.includes("#")) {
                                                            let partsHeartRate = heartRate.split("#");
                                                            heartRateValue = Number(partsHeartRate[0]);
                                                            heartRateText = partsHeartRate[1];
                                                            if (partsHeartRate[2] && partsHeartRate[2].includes("~")) {
                                                                let heartRateRange = partsHeartRate[2].split("~");
                                                                heartRateLow = Number(heartRateRange[0]);
                                                                heartRateHigh = Number(heartRateRange[1]);
                                                            }
                                                        } else {
                                                            heartRateValue = heartRateText = heartRateLow = heartRateHigh = null;
                                                        }


                                                        // Split body temperature if possible

                                                        let bodyTemperatureValue,
                                                        bodyTemperatureText, bodyTemperatureLow,
                                                        bodyTemperatureHigh;

                                                        if (bodyTemperature &&
                                                        bodyTemperature.includes("#")) {
                                                            let partsBodyTemperature = bodyTemperature.split("#");
                                                            bodyTemperatureValue = Number(partsBodyTemperature[0]);
                                                            bodyTemperatureText = partsBodyTemperature[1];
                                                            if (partsBodyTemperature[2] && partsBodyTemperature[2].includes("~")) {
                                                                let bodyTemperatureRange = partsBodyTemperature[2].split("~");
                                                                bodyTemperatureLow = Number(bodyTemperatureRange[0]);
                                                                bodyTemperatureHigh = Number(bodyTemperatureRange[1]);
                                                            }
                                                        } else {
                                                            bodyTemperatureValue = bodyTemperatureText = bodyTemperatureLow = bodyTemperatureHigh = null;
                                                        }


                                                        // Split spo2 if possible

                                                        let spo2Value, spo2Text, spo2Low,
                                                        spo2High;

                                                        if (spo2 && spo2.includes("#")) {
                                                            let partsSpo2 = spo2.split("#");
                                                            spo2Value = Number(partsSpo2[0]);
                                                            spo2Text = partsSpo2[1];
                                                            if (partsSpo2[2] && partsSpo2[2].includes("~")) {
                                                                let spo2Range = partsSpo2[2].split("~");
                                                                spo2Low = Number(spo2Range[0]);
                                                                spo2High = Number(spo2Range[1]);
                                                            }
                                                        } else {
                                                            spo2Value = spo2Text = spo2Low = spo2High = null;
                                                        }


                                                        let jsonSys = {
                                                            "fullUrl": "Observation/sys-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "sys-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-systolic-bp-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "8480-6",
                                                                            "display": "Systolic blood pressure"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": bloodHighValue,
                                                                    "unit": "mm[Hg]",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "mm[Hg]"
                                                                },
                                                                "referenceRange": {
                                                                    "low": {
                                                                        "value": bloodHighLow
                                                                    },
                                                                    "high": {
                                                                        "value": bloodHighHigh
                                                                    }
                                                                }
                                                            }
                                                        }


                                                        let jsonDia = {
                                                            "fullUrl": "Observation/dia-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "dia-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-diastolic-bp-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "8462-4",
                                                                            "display": "Diastolic blood pressure"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": bloodLowValue,
                                                                    "unit": "mm[Hg]",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "mm[Hg]"
                                                                },
                                                                "referenceRange": {
                                                                    "low": {
                                                                        "value": bloodLowLow
                                                                    },
                                                                    "high": {
                                                                        "value": bloodLowHigh
                                                                    }
                                                                }
                                                            }
                                                        }


                                                        let jsonHr = {
                                                            "fullUrl": "Observation/hr-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "hr-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-heart-rate-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "8867-4",
                                                                            "display": "Heart rate"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": heartRateValue,
                                                                    "unit": "/min",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "/min"
                                                                },
                                                                "referenceRange": {
                                                                    "low": {
                                                                        "value": heartRateLow
                                                                    },
                                                                    "high": {
                                                                        "value": heartRateHigh
                                                                    }
                                                                }
                                                            }
                                                        }


                                                        let jsonTemp = {
                                                            "fullUrl": "Observation/temp-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "temp-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-body-temp-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "8310-5",
                                                                            "display": "Body temperature"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": bodyTemperatureValue,
                                                                    "unit": "Cel",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "Cel"
                                                                }
                                                            }
                                                        }


                                                        let jsonSpo2 = {
                                                            "fullUrl": "Observation/spo2-obs",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "spo2-obs",
                                                                "meta": {
                                                                    "source": "http://provider.hie.moh.gov.my",
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-oxygen-sat-my-core"
                                                                    ]
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "59408-5",
                                                                            "display": "Oxygen Saturation"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": spo2Value,
                                                                    "unit": "%",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "%"
                                                                }
                                                            }
                                                        }


                                                        if (
                                                            isValidFormat(bloodHigh) ||
                                                            isValidFormat(bloodLow) ||
                                                            isValidFormat(heartRate) ||
                                                            isValidFormat(bodyTemperature) ||
                                                            isValidFormat(spo2)
                                                        ) {
                                                            if (isValidFormat(bloodHigh)) {
                                                                let memberSys = {
                                                                    "reference": "Observation/sys-obs"
                                                                };
                                                                vsHasMember.push(memberSys);
                                                                entry.push(jsonSys);
                                                            }

                                                            if (isValidFormat(bloodLow)) {
                                                                let memberDia = {
                                                                    "reference": "Observation/dia-obs"
                                                                };
                                                                vsHasMember.push(memberDia);
                                                                entry.push(jsonDia);
                                                            }

                                                            if (isValidFormat(heartRate)) {
                                                                let memberHr = {
                                                                    "reference": "Observation/hr-obs"
                                                                };
                                                                vsHasMember.push(memberHr);
                                                                entry.push(jsonHr);
                                                            }

                                                            if (isValidFormat(bodyTemperature)) {
                                                                let memberTemp = {
                                                                    "reference": "Observation/temp-obs"
                                                                };
                                                                vsHasMember.push(memberTemp);
                                                                entry.push(jsonTemp);
                                                            }

                                                            if (isValidFormat(spo2)) {
                                                                let memberSpo2 = {
                                                                    "reference": "Observation/spo2-obs"
                                                                };
                                                                vsHasMember.push(memberSpo2);
                                                                entry.push(jsonSpo2);
                                                            }
                                                        }



                                                        //FAT//


                                                        // Split body fat rate if possible

                                                        let zflvValue, zflvText, zflvCode,
                                                        zflvLow, zflvHigh;

                                                        if (zflv && zflv.includes("#")) {
                                                            let partsZflv = zflv.split("#");
                                                            zflvValue = Number(partsZflv[0]);
                                                            zflvText = partsZflv[1];

                                                            zflvText = zflvText.charAt(0) !== zflvText.charAt(0).toUpperCase()
                                                                ? zflvText.charAt(0).toUpperCase() + zflvText.slice(1).toLowerCase()
                                                                : zflvText;

                                                            if (partsZflv[2] && partsZflv[2].includes("~")) {
                                                                let zflvRange = partsZflv[2].split("~");
                                                                zflvLow = Number(zflvRange[0]);
                                                                zflvHigh = Number(zflvRange[1]);
                                                            }
                                                        } else {
                                                            zflvValue = zflvText = zflvLow = zflvHigh = null;
                                                        }


                                                        // Correct comparison for zflvText

                                                        if (zflvText === "Low") {
                                                            zflvCode = "L";
                                                        } else if (zflvText === "Normal") {
                                                            zflvCode = "N";
                                                        } else if (zflvText === "High") {
                                                            zflvCode = "H";
                                                        } else {
                                                            zflvCode = null; // Set to null or a default value if zflvText doesn't match
                                                        }


                                                        // Split basal metabolism if possible

                                                        let jcdxValue, jcdxText, jcdxCode,
                                                        jcdxLow, jcdxHigh;

                                                        if (jcdx && jcdx.includes("#")) {
                                                            let partsJcdx = jcdx.split("#");
                                                            jcdxValue = Number(partsJcdx[0]);
                                                            jcdxText = partsJcdx[1];

                                                            jcdxText = jcdxText.charAt(0) !== jcdxText.charAt(0).toUpperCase()
                                                                ? jcdxText.charAt(0).toUpperCase() + jcdxText.slice(1).toLowerCase()
                                                                : jcdxText;

                                                            if (partsJcdx[2] && partsJcdx[2].includes("~")) {
                                                                let jcdxRange = partsJcdx[2].split("~");
                                                                jcdxLow = Number(jcdxRange[0]);  // Convert to decimal
                                                                jcdxHigh = Number(jcdxRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            jcdxValue = jcdxText = jcdxLow = jcdxHigh = null;
                                                        }


                                                        // Correct comparison for jcdxText

                                                        if (jcdxText === "Low") {
                                                            jcdxCode = "L";
                                                        } else if (jcdxText === "Normal") {
                                                            jcdxCode = "N";
                                                        } else if (jcdxText === "High") {
                                                            jcdxCode = "H";
                                                        } else {
                                                            jcdxCode = null; // Set to null or a default value if jcdxText doesn't match
                                                        }


                                                        // Split body water content if possible

                                                        let tsflValue, tsflText, tsflCode,
                                                        tsflLow, tsflHigh;

                                                        if (tsfl && tsfl.includes("#")) {
                                                            let partsTsfl = tsfl.split("#");
                                                            tsflValue = Number(partsTsfl[0]);
                                                            tsflText = partsTsfl[1];

                                                            tsflText = tsflText.charAt(0) !== tsflText.charAt(0).toUpperCase()
                                                                ? tsflText.charAt(0).toUpperCase() + tsflText.slice(1).toLowerCase()
                                                                : tsflText;

                                                            if (partsTsfl[2] && partsTsfl[2].includes("~")) {
                                                                let tsflRange = partsTsfl[2].split("~");
                                                                tsflLow = Number(tsflRange[0]);  // Convert to decimal
                                                                tsflHigh = Number(tsflRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            tsflValue = tsflText = tsflLow = tsflHigh = null;
                                                        }


                                                        // Correct comparison for tsflText

                                                        if (tsflText === "Low") {
                                                            tsflCode = "L";
                                                        } else if (tsflText === "Normal") {
                                                            tsflCode = "N";
                                                        } else if (tsflText === "High") {
                                                            tsflCode = "H";
                                                        } else {
                                                            tsflCode = null; // Set to null or a default value if tsflText doesn't match
                                                        }


                                                        // Split body water rate if possible

                                                        let tsflvValue, tsflvText, tsflvCode,
                                                        tsflvLow, tsflvHigh;

                                                        if (tsflv && tsflv.includes("#")) {
                                                            let partsTsflv = tsflv.split("#");
                                                            tsflvValue = Number(partsTsflv[0]);
                                                            tsflvText = partsTsflv[1];

                                                            tsflvText = tsflvText.charAt(0) !== tsflvText.charAt(0).toUpperCase()
                                                                ? tsflvText.charAt(0).toUpperCase() + tsflvText.slice(1).toLowerCase()
                                                                : tsflvText;

                                                            if (partsTsflv[2] && partsTsflv[2].includes("~")) {
                                                                let tsflvRange = partsTsflv[2].split("~");
                                                                tsflvLow = Number(tsflvRange[0]);  // Convert to decimal
                                                                tsflvHigh = Number(tsflvRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            tsflvValue = tsflvText = tsflvLow = tsflvHigh = null;
                                                        }


                                                        // Correct comparison for tsflvText

                                                        if (tsflvText === "Low") {
                                                            tsflvCode = "L";
                                                        } else if (tsflvText === "Normal") {
                                                            tsflvCode = "N";
                                                        } else if (tsflvText === "High") {
                                                            tsflvCode = "H";
                                                        } else {
                                                            tsflvCode = null; // Set to null or a default value if tsflvText doesn't match
                                                        }


                                                        // Split body fat content if possible

                                                        let zflValue, zflText, zflCode, zflLow,
                                                        zflHigh;

                                                        if (zfl && zfl.includes("#")) {
                                                            let partsZfl = zfl.split("#");
                                                            zflValue = Number(partsZfl[0]);
                                                            zflText = partsZfl[1];

                                                            zflText = zflText.charAt(0) !== zflText.charAt(0).toUpperCase()
                                                                ? zflText.charAt(0).toUpperCase() + zflText.slice(1).toLowerCase()
                                                                : zflText;

                                                            if (partsZfl[2] && partsZfl[2].includes("~")) {
                                                                let zflRange = partsZfl[2].split("~");
                                                                zflLow = Number(zflRange[0]);  // Convert to decimal
                                                                zflHigh = Number(zflRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            zflValue = zflText = zflLow = zflHigh = null;
                                                        }


                                                        // Correct comparison for zflText

                                                        if (zflText === "Low") {
                                                            zflCode = "L";
                                                        } else if (zflText === "Normal") {
                                                            zflCode = "N";
                                                        } else if (zflText === "High") {
                                                            zflCode = "H";
                                                        } else {
                                                            zflCode = null; // Set to null or a default value if zflText doesn't match
                                                        }


                                                        // Split body muscle content if possible

                                                        let jrlValue, jrlText, jrlCode, jrlLow,
                                                        jrlHigh;

                                                        if (jrl && jrl.includes("#")) {
                                                            let partsJrl = jrl.split("#");
                                                            jrlValue = Number(partsJrl[0]);
                                                            jrlText = partsJrl[1];

                                                            jrlText = jrlText.charAt(0) !== jrlText.charAt(0).toUpperCase()
                                                                ? jrlText.charAt(0).toUpperCase() + jrlText.slice(1).toLowerCase()
                                                                : jrlText;

                                                            if (partsJrl[2] && partsJrl[2].includes("~")) {
                                                                let jrlRange = partsJrl[2].split("~");
                                                                jrlLow = Number(jrlRange[0]);  // Convert to decimal
                                                                jrlHigh = Number(jrlRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            jrlValue = jrlText = jrlLow = jrlHigh = null;
                                                        }


                                                        // Correct comparison for jrlText

                                                        if (jrlText === "Low") {
                                                            jrlCode = "L";
                                                        } else if (jrlText === "Normal") {
                                                            jrlCode = "N";
                                                        } else if (jrlText === "High") {
                                                            jrlCode = "H";
                                                        } else {
                                                            jrlCode = null; // Set to null or a default value if jrlText doesn't match
                                                        }


                                                        // Split body muscle rate if possible

                                                        let jrlvValue, jrlvText, jrlvCode,
                                                        jrlvLow, jrlvHigh;

                                                        if (jrlv && jrlv.includes("#")) {
                                                            let partsJrlv = jrlv.split("#");
                                                            jrlvValue = Number(partsJrlv[0]);
                                                            jrlvText = partsJrlv[1];

                                                            jrlvText = jrlvText.charAt(0) !== jrlvText.charAt(0).toUpperCase()
                                                                ? jrlvText.charAt(0).toUpperCase() + jrlvText.slice(1).toLowerCase()
                                                                : jrlvText;

                                                            if (partsJrlv[2] && partsJrlv[2].includes("~")) {
                                                                let jrlvRange = partsJrlv[2].split("~");
                                                                jrlvLow = Number(jrlvRange[0]);  // Convert to decimal
                                                                jrlvHigh = Number(jrlvRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            jrlvValue = jrlvText = jrlvLow = jrlvHigh = null;
                                                        }


                                                        // Correct comparison for jrlvText

                                                        if (jrlvText === "Low") {
                                                            jrlvCode = "L";
                                                        } else if (jrlvText === "Normal") {
                                                            jrlvCode = "N";
                                                        } else if (jrlvText === "High") {
                                                            jrlvCode = "H";
                                                        } else {
                                                            jrlvCode = null; // Set to null or a default value if jrlvText doesn't match
                                                        }


                                                        // Split bone salt if possible

                                                        let gyValue, gyText, gyCode, gyLow,
                                                        gyHigh;

                                                        if (gy && gy.includes("#")) {
                                                            let partsGy = gy.split("#");
                                                            gyValue = Number(partsGy[0]);
                                                            gyText = partsGy[1];

                                                            gyText = gyText.charAt(0) !== gyText.charAt(0).toUpperCase()
                                                                ? gyText.charAt(0).toUpperCase() + gyText.slice(1).toLowerCase()
                                                                : gyText;

                                                            if (partsGy[2] && partsGy[2].includes("~")) {
                                                                let gyRange = partsGy[2].split("~");
                                                                gyLow = Number(gyRange[0]);  // Convert to decimal
                                                                gyHigh = Number(gyRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            gyValue = gyText = gyLow = gyHigh = null;
                                                        }


                                                        // Correct comparison for gyText

                                                        if (gyText === "Low") {
                                                            gyCode = "L";
                                                        } else if (gyText === "Normal") {
                                                            gyCode = "N";
                                                        } else if (gyText === "High") {
                                                            gyCode = "H";
                                                        } else {
                                                            gyCode = null; // Set to null or a default value if gyText doesn't match
                                                        }


                                                        // Split fat free mass if possible

                                                        let qztzValue, qztzText, qztzCode,
                                                        qztzLow, qztzHigh;

                                                        if (qztz && qztz.includes("#")) {
                                                            let partsQztz = qztz.split("#");
                                                            qztzValue = Number(partsQztz[0]);
                                                            qztzText = partsQztz[1];

                                                            qztzText = qztzText.charAt(0) !== qztzText.charAt(0).toUpperCase()
                                                                ? qztzText.charAt(0).toUpperCase() + qztzText.slice(1).toLowerCase()
                                                                : qztzText;

                                                            if (partsQztz[2] && partsQztz[2].includes("~")) {
                                                                let qztzRange = partsQztz[2].split("~");
                                                                qztzLow = Number(qztzRange[0]);  // Convert to decimal
                                                                qztzHigh = Number(qztzRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            qztzValue = qztzText = qztzLow = qztzHigh = null;
                                                        }


                                                        // Correct comparison for qztzText

                                                        if (qztzText === "Low") {
                                                            qztzCode = "L";
                                                        } else if (qztzText === "Normal") {
                                                            qztzCode = "N";
                                                        } else if (qztzText === "High") {
                                                            qztzCode = "H";
                                                        } else {
                                                            qztzCode = null; // Set to null or a default value if qztzText doesn't match
                                                        }


                                                        // Split protein rate if possible

                                                        let dbzlvValue, dbzlvText, dbzlvCode,
                                                        dbzlvLow, dbzlvHigh;

                                                        if (dbzlv && dbzlv.includes("#")) {
                                                            let partsDbzlv = dbzlv.split("#");
                                                            dbzlvValue = Number(partsDbzlv[0]);
                                                            dbzlvText = partsDbzlv[1];

                                                            dbzlvText = dbzlvText.charAt(0) !== dbzlvText.charAt(0).toUpperCase()
                                                                ? dbzlvText.charAt(0).toUpperCase() + dbzlvText.slice(1).toLowerCase()
                                                                : dbzlvText;

                                                            if (partsDbzlv[2] && partsDbzlv[2].includes("~")) {
                                                                let dbzlvRange = partsDbzlv[2].split("~");
                                                                dbzlvLow = Number(dbzlvRange[0]);  // Convert to decimal
                                                                dbzlvHigh = Number(dbzlvRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            dbzlvValue = dbzlvText = dbzlvLow = dbzlvHigh = null;
                                                        }


                                                        // Correct comparison for dbzlvText

                                                        if (dbzlvText === "Low") {
                                                            dbzlvCode = "L";
                                                        } else if (dbzlvText === "Normal") {
                                                            dbzlvCode = "N";
                                                        } else if (dbzlvText === "High") {
                                                            dbzlvCode = "H";
                                                        } else {
                                                            dbzlvCode = null; // Set to null or a default value if dbzlvText doesn't match
                                                        }


                                                        // Split intracellular fluid volume if
                                                        possible

                                                        let xbnylValue, xbnylText, xbnylCode,
                                                        xbnylLow, xbnylHigh;

                                                        if (xbnyl && xbnyl.includes("#")) {
                                                            let partsXbnyl = xbnyl.split("#");
                                                            xbnylValue = Number(partsXbnyl[0]);
                                                            xbnylText = partsXbnyl[1];

                                                            xbnylText = xbnylText.charAt(0) !== xbnylText.charAt(0).toUpperCase()
                                                                ? xbnylText.charAt(0).toUpperCase() + xbnylText.slice(1).toLowerCase()
                                                                : xbnylText;

                                                            if (partsXbnyl[2] && partsXbnyl[2].includes("~")) {
                                                                let xbnylRange = partsXbnyl[2].split("~");
                                                                xbnylLow = Number(xbnylRange[0]);  // Convert to decimal
                                                                xbnylHigh = Number(xbnylRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            xbnylValue = xbnylText = xbnylLow = xbnylHigh = null;
                                                        }


                                                        // Correct comparison for xbnylText

                                                        if (xbnylText === "Low") {
                                                            xbnylCode = "L";
                                                        } else if (xbnylText === "Normal") {
                                                            xbnylCode = "N";
                                                        } else if (xbnylText === "High") {
                                                            xbnylCode = "H";
                                                        } else {
                                                            xbnylCode = null; // Set to null or a default value if xbnylText doesn't match
                                                        }


                                                        // Split extracellular fluid volume if
                                                        possible

                                                        let wxyaValue, wxyaText, wxyaCode,
                                                        wxyaLow, wxyaHigh;

                                                        if (wxya && wxya.includes("#")) {
                                                            let partsWxya = wxya.split("#");
                                                            wxyaValue = Number(partsWxya[0]);
                                                            wxyaText = partsWxya[1];

                                                            wxyaText = wxyaText.charAt(0) !== wxyaText.charAt(0).toUpperCase()
                                                                ? wxyaText.charAt(0).toUpperCase() + wxyaText.slice(1).toLowerCase()
                                                                : wxyaText;

                                                            if (partsWxya[2] && partsWxya[2].includes("~")) {
                                                                let wxyaRange = partsWxya[2].split("~");
                                                                wxyaLow = Number(wxyaRange[0]);  // Convert to decimal
                                                                wxyaHigh = Number(wxyaRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            wxyaValue = wxyaText = wxyaLow = wxyaHigh = null;
                                                        }


                                                        // Correct comparison for wxyaText

                                                        if (wxyaText === "Low") {
                                                            wxyaCode = "L";
                                                        } else if (wxyaText === "Normal") {
                                                            wxyaCode = "N";
                                                        } else if (wxyaText === "High") {
                                                            wxyaCode = "H";
                                                        } else {
                                                            wxyaCode = null; // Set to null or a default value if wxyaText doesn't match
                                                        }


                                                        // Split intracellular fluid rate if
                                                        possible

                                                        let xbnylvValue, xbnylvText, xbnylvCode,
                                                        xbnylvLow, xbnylvHigh;

                                                        if (xbnylv && xbnylv.includes("#")) {
                                                            let partsXbnylv = xbnylv.split("#");
                                                            xbnylvValue = Number(partsXbnylv[0]);
                                                            xbnylvText = partsXbnylv[1];

                                                            xbnylvText = xbnylvText.charAt(0) !== xbnylvText.charAt(0).toUpperCase()
                                                                ? xbnylvText.charAt(0).toUpperCase() + xbnylvText.slice(1).toLowerCase()
                                                                : xbnylvText;

                                                            if (partsXbnylv[2] && partsXbnylv[2].includes("~")) {
                                                                let xbnylvRange = partsXbnylv[2].split("~");
                                                                xbnylvLow = Number(xbnylvRange[0]);  // Convert to decimal
                                                                xbnylvHigh = Number(xbnylvRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            xbnylvValue = xbnylvText = xbnylvLow = xbnylvHigh = null;
                                                        }


                                                        // Correct comparison for xbnylvText

                                                        if (xbnylvText === "Low") {
                                                            xbnylvCode = "L";
                                                        } else if (xbnylvText === "Normal") {
                                                            xbnylvCode = "N";
                                                        } else if (xbnylvText === "High") {
                                                            xbnylvCode = "H";
                                                        } else {
                                                            xbnylvCode = null; // Set to null or a default value if xbnylvText doesn't match
                                                        }


                                                        // Split extracellular fluid rate if
                                                        possible

                                                        let xbwylvValue, xbwylvText, xbwylvCode,
                                                        xbwylvLow, xbwylvHigh;

                                                        if (xbwylv && xbwylv.includes("#")) {
                                                            let partsXbwylv = xbwylv.split("#");
                                                            xbwylvValue = Number(partsXbwylv[0]);
                                                            xbwylvText = partsXbwylv[1];

                                                            xbwylvText = xbwylvText.charAt(0) !== xbwylvText.charAt(0).toUpperCase()
                                                                ? xbwylvText.charAt(0).toUpperCase() + xbwylvText.slice(1).toLowerCase()
                                                                : xbwylvText;

                                                            if (partsXbwylv[2] && partsXbwylv[2].includes("~")) {
                                                                let xbwylvRange = partsXbwylv[2].split("~");
                                                                xbwylvLow = Number(xbwylvRange[0]);  // Convert to decimal
                                                                xbwylvHigh = Number(xbwylvRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            xbwylvValue = xbwylvText = xbwylvLow = xbwylvHigh = null;
                                                        }


                                                        // Correct comparison for xbwylvText

                                                        if (xbwylvText === "Low") {
                                                            xbwylvCode = "L";
                                                        } else if (xbwylvText === "Normal") {
                                                            xbwylvCode = "N";
                                                        } else if (xbwylvText === "High") {
                                                            xbwylvCode = "H";
                                                        } else {
                                                            xbwylvCode = null; // Set to null or a default value if xbwylvText doesn't match
                                                        }


                                                        // Split protein if possible

                                                        let dbzValue, dbzText, dbzCode, dbzLow,
                                                        dbzHigh;

                                                        if (dbz && dbz.includes("#")) {
                                                            let partsDbz = dbz.split("#");
                                                            dbzValue = Number(partsDbz[0]);
                                                            dbzText = partsDbz[1];

                                                            dbzText = dbzText.charAt(0) !== dbzText.charAt(0).toUpperCase()
                                                                ? dbzText.charAt(0).toUpperCase() + dbzText.slice(1).toLowerCase()
                                                                : dbzText;

                                                            if (partsDbz[2] && partsDbz[2].includes("~")) {
                                                                let dbzRange = partsDbz[2].split("~");
                                                                dbzLow = Number(dbzRange[0]);  // Convert to decimal
                                                                dbzHigh = Number(dbzRange[1]); // Convert to decimal
                                                            }
                                                        } else {
                                                            dbzValue = dbzText = dbzLow = dbzHigh = null;
                                                        }


                                                        // Correct comparison for dbzText

                                                        if (dbzText === "Low") {
                                                            dbzCode = "L";
                                                        } else if (dbzText === "Normal") {
                                                            dbzCode = "N";
                                                        } else if (dbzText === "High") {
                                                            dbzCode = "H";
                                                        } else {
                                                            dbzCode = null; // Set to null or a default value if dbzText doesn't match
                                                        }


                                                        // Split bone mass if possible

                                                        let glValue, glText, glCode, glLow,
                                                        glHigh;

                                                        if (gl && gl.includes("#")) {
                                                            let partsGl = gl.split("#");
                                                            glValue = Number(partsGl[0]);
                                                            glText = partsGl[1];

                                                            glText = glText.charAt(0) !== glText.charAt(0).toUpperCase()
                                                                ? glText.charAt(0).toUpperCase() + glText.slice(1).toLowerCase()
                                                                : glText;

                                                            if (partsGl[2] && partsGl[2].includes("greater than")) {
                                                                let glRange = partsGl[2].split("greater than");
                                                                glLow = Number(glRange[1]);  // Convert to decimal
                                                            }
                                                        } else {
                                                            glValue = glText = glLow = glHigh = null;
                                                        }


                                                        // Correct comparison for glText

                                                        if (glText === "Low") {
                                                            glCode = "L";
                                                        } else if (glText === "Normal") {
                                                            glCode = "N";
                                                        } else if (glText === "High") {
                                                            glCode = "H";
                                                        } else {
                                                            glCode = null; // Set to null or a default value if glText doesn't match
                                                        }


                                                        let arrayFatComponent = [];


                                                        let jsonFatAnalysis = {
                                                            "fullUrl": "Observation/fat-analysis-example",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "id": "fat-analysis-example",
                                                                "meta": {
                                                                    "versionId": "7",
                                                                    "lastUpdated": "2024-09-30T10:23:36.259+08:00",
                                                                    "source": "http://provider.hie.moh.gov.my#lF0pLtWSO5iyGMJ4"
                                                                },
                                                                "text": {
                                                                    "status": "generated",
                                                                    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Performed Date</b>: 27-Sep-2024 08:00</p><p><b>Percentage of body fat by Bioelectrical impedance analysis</b>: </p><ul><li><b>Percentage of body fat Measured</b>: 21.7% *High (10.0 - 21.0)</li><li><b>Total metabolism [Mass] 24 hour</b>: 1591.0kcal *Normal (1395.0 - 1705.0)</li><li><b>Body water mass</b>: 42.5kg *Normal (27.0 - 45.4)</li><li><b>Percentage of body water</b>: 57.0% *Normal (50.0 - 65.0)</li><li><b>Body fat [Mass] Calculated</b>: 16.1kg *High (5.4 - 14.7)</li><li><b>Body muscle mass Calculated</b>: 55.7kg *Normal (35.7 - 59.4)</li><li><b>Body muscle percentage - Body muscle mass/Body weight Measured</b>: 74.7% *Normal (50.0 - 65.0)</li><li><b>Bone salt</b>: 2.6kg *Low (2.7 - 3.7)</li><li><b>Fat-free mass (observable entity) </b>: 58.4kg *High (41.0 - 56.8)</li><li><b>Protein rate</b>: 16.0% *High (16.0 - 20.0)</li><li><b>Intracellular fluid [Volume] Estimated</b>: 28.3kg *High (17.9 - 30.1)</li><li><b>Extracellular fluid [Volume] Measured</b>: 8.2kg *High (10.0 - 21.0)</li><li><b>Intracellular fluid rate</b>: 38.0% *Normal (33.0 - 43.0)</li><li><b>Extracellular fluid rate</b>: 19.0% *Normal (17 - 22.0)</li><li><b>Protein</b>: 13.1kg *Normal (8.7 - 14.0)</li><li><b>Visceral fat [Area] Measured</b>: 17.6 *High (8.7 - 14.0)</li><li><b>Body bone mass</b>: 4.1kg *Normal</li></ul></div>"
                                                                },
                                                                "status": "final",
                                                                "category": [
                                                                    {
                                                                        "coding": [
                                                                            {
                                                                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                                                                "code": "vital-signs",
                                                                                "display": "Vital Signs"
                                                                            }
                                                                        ]
                                                                    }
                                                                ],
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://loinc.org",
                                                                            "code": "77233-5",
                                                                            "display": "Percentage of body fat by Bioelectrical impedance analysis"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "component": arrayFatComponent
                                                            }
                                                        }


                                                        let jsonZflv = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://loinc.org",
                                                                        "code": "41982-0",
                                                                        "display": "Percentage of body fat Measured"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "ZFLV",
                                                                        "display": "Body fat rate"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": zflvValue,
                                                                "unit": "%",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "%"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": zflvCode,
                                                                            "display": zflvText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": zflvLow
                                                                    },
                                                                    "high": {
                                                                        "value": zflvHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonJcdx = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://loinc.org",
                                                                        "code": "41971-3",
                                                                        "display": "Total metabolism [Mass] 24 hour"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "JCDX",
                                                                        "display": "Basal metabolism"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": jcdxValue,
                                                                "unit": "kcal",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kcal"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": jcdxCode,
                                                                            "display": jcdxText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": jcdxLow
                                                                    },
                                                                    "high": {
                                                                        "value": jcdxHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonTsfl = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "https://loinc.org",
                                                                        "code": "101683-1",
                                                                        "display": "Body water mass"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "TSFL",
                                                                        "display": "Body water content"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": tsflValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": tsflCode,
                                                                            "display": tsflText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": tsflLow
                                                                    },
                                                                    "high": {
                                                                        "value": tsflHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonTsflv = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "https://loinc.org",
                                                                        "code": "101684-9",
                                                                        "display": "Percentage of body water"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "TSFLV",
                                                                        "display": "Body water rate"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": tsflvValue,
                                                                "unit": "%",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "%"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": tsflvCode,
                                                                            "display": tsflvText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": tsflvLow
                                                                    },
                                                                    "high": {
                                                                        "value": tsflvHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonZfl = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://loinc.org",
                                                                        "code": "73708-0",
                                                                        "display": "Body fat [Mass] Calculated"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "ZFL",
                                                                        "display": "Body fat content"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": zflValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": zflCode,
                                                                            "display": zflText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": zflLow
                                                                    },
                                                                    "high": {
                                                                        "value": zflHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonJrl = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://loinc.org",
                                                                        "code": "73965-6",
                                                                        "display": "Body muscle percentage - Body muscle mass/Body weight Measured"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "JRLV",
                                                                        "display": "Body muscle rate"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": jrlValue,
                                                                "unit": "%",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "%"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": jrlCode,
                                                                            "display": jrlText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": jrlLow
                                                                    },
                                                                    "high": {
                                                                        "value": jrlHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonJrlv = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://loinc.org",
                                                                        "code": "73965-6",
                                                                        "display": "Body muscle percentage - Body muscle mass/Body weight Measured"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "JRLV",
                                                                        "display": "Body muscle rate"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": jrlvValue,
                                                                "unit": "%",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "%"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": jrlvCode,
                                                                            "display": jrlvText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": jrlvLow
                                                                    },
                                                                    "high": {
                                                                        "value": jrlvHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonGy = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "GY",
                                                                        "display": "Bone salt"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": gyValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": gyCode,
                                                                            "display": gyText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": gyLow
                                                                    },
                                                                    "high": {
                                                                        "value": gyHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonQztz = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://snomed.info/sct",
                                                                        "code": "248363008",
                                                                        "display": "Fat-free mass (observable entity) "
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "QZTZ",
                                                                        "display": "Fat free mass"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": qztzValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": qztzCode,
                                                                            "display": qztzText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": qztzLow
                                                                    },
                                                                    "high": {
                                                                        "value": qztzHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonDbzlv = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "DBZLV",
                                                                        "display": "Protein rate"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": dbzlvValue,
                                                                "unit": "%",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "%"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": dbzlvCode,
                                                                            "display": dbzlvText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": dbzlvLow
                                                                    },
                                                                    "high": {
                                                                        "value": dbzlvHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonXbnyl = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://loinc.org",
                                                                        "code": "73705-6",
                                                                        "display": "Intracellular fluid [Volume] Estimated"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "XBNYL",
                                                                        "display": "Intracellular fluid volume"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": xbnylValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": xbnylCode,
                                                                            "display": xbnylText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": xbnylLow
                                                                    },
                                                                    "high": {
                                                                        "value": xbnylHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonWxya = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://loinc.org",
                                                                        "code": "73706-4",
                                                                        "display": "Extracellular fluid [Volume] Measured"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "WXYA",
                                                                        "display": "Extracellular fluid volume"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": wxyaValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": wxyaCode,
                                                                            "display": wxyaText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": wxyaLow
                                                                    },
                                                                    "high": {
                                                                        "value": wxyaHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonXbnylv = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "XBNYLV",
                                                                        "display": "Intracellular fluid rate"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": xbnylvValue,
                                                                "unit": "%",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "%"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": xbnylvCode,
                                                                            "display": xbnylvText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": xbnylvLow
                                                                    },
                                                                    "high": {
                                                                        "value": xbnylvHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonXbwylv = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "XBWYLV",
                                                                        "display": "Extracellular fluid rate"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": xbwylvValue,
                                                                "unit": "%",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "%"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": xbwylvCode,
                                                                            "display": xbwylvText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": xbwylvLow
                                                                    },
                                                                    "high": {
                                                                        "value": xbwylvHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonDbz = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "DBZ",
                                                                        "display": "Protein"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": dbzValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": dbzCode,
                                                                            "display": dbzText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": dbzLow
                                                                    },
                                                                    "high": {
                                                                        "value": dbzHigh
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        let jsonGl = {
                                                            "code": {
                                                                "coding": [
                                                                    {
                                                                        "system": "https://loinc.org",
                                                                        "code": "101685-6",
                                                                        "display": "Body bone mass"
                                                                    },
                                                                    {
                                                                        "system": "http://fhir.hie.moh.gov.my/CodeSystem/fat-analysis-my-core",
                                                                        "code": "GL",
                                                                        "display": "Bone mass"
                                                                    }
                                                                ]
                                                            },
                                                            "valueQuantity": {
                                                                "value": glValue,
                                                                "unit": "kg",
                                                                "system": "http://unitsofmeasure.org",
                                                                "code": "kg"
                                                            },
                                                            "interpretation": [
                                                                {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
                                                                            "code": glCode,
                                                                            "display": glText
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "referenceRange": [
                                                                {
                                                                    "low": {
                                                                        "value": glLow
                                                                    }
                                                                }
                                                            ]
                                                        }


                                                        if (
                                                            isValidFormat(zflv) ||
                                                            isValidFormat(jcdx) ||
                                                            isValidFormat(tsfl) ||
                                                            isValidFormat(tsflv) ||
                                                            isValidFormat(zfl) ||
                                                            isValidFormat(jrl) ||
                                                            isValidFormat(jrlv) ||
                                                            isValidFormat(gy) ||
                                                            isValidFormat(qztz) ||
                                                            isValidFormat(dbzlv) ||
                                                            isValidFormat(xbnyl) ||
                                                            isValidFormat(wxya) ||
                                                            isValidFormat(xbnylv) ||
                                                            isValidFormat(xbwylv) ||
                                                            isValidFormat(dbz) ||
                                                            isValidFormat(gl)
                                                        ) {
                                                            entry.push(jsonFatAnalysis);

                                                            const components = [
                                                                { value: zflv, json: jsonZflv },
                                                                { value: jcdx, json: jsonJcdx },
                                                                { value: tsfl, json: jsonTsfl },
                                                                { value: tsflv, json: jsonTsflv },
                                                                { value: zfl, json: jsonZfl },
                                                                { value: jrl, json: jsonJrl },
                                                                { value: jrlv, json: jsonJrlv },
                                                                { value: gy, json: jsonGy },
                                                                { value: qztz, json: jsonQztz },
                                                                { value: dbzlv, json: jsonDbzlv },
                                                                { value: xbnyl, json: jsonXbnyl },
                                                                { value: wxya, json: jsonWxya },
                                                                { value: xbnylv, json: jsonXbnylv },
                                                                { value: xbwylv, json: jsonXbwylv },
                                                                { value: dbz, json: jsonDbz },
                                                                { value: gl, json: jsonGl }
                                                            ];

                                                            components.forEach(component => {
                                                                if (isValidFormat(component.value)) {
                                                                    arrayFatComponent.push(component.json);
                                                                }
                                                            });
                                                        }



                                                        //glucose//


                                                        // Split xtVal if possible

                                                        let xtValValue, xtValText, xtValLow,
                                                        xtValHigh;

                                                        if (xtVal && xtVal.includes("#")) {
                                                            let partsXtVal = xtVal.split("#");
                                                            xtValValue = Number(partsXtVal[0]);
                                                            xtValText = partsXtVal[1];
                                                            if (partsXtVal[2] && partsXtVal[2].includes("~")) {
                                                                let xtValRange = partsXtVal[2].split("~");
                                                                xtValLow = Number(xtValRange[0]);
                                                                xtValHigh = Number(xtValRange[1]);
                                                            }
                                                        } else {
                                                            xtValValue = xtValText = xtValLow = xtValHigh = null; // Default or error values
                                                        }




                                                        let xtCode;

                                                        let xtText;

                                                        if (xtType == "0") {
                                                            xtCode = "271062006";
                                                            xtText = "Fasting blood glucose";
                                                        } else if (xtType == "1") {
                                                            xtCode = "703767004";
                                                            xtText = "One hour after a meal";
                                                        } else if (xtType == "2") {
                                                            xtCode = "703768009";
                                                            xtText = "Two hours after a meal";
                                                        } else {
                                                            xtCode = "null";
                                                            xtText = "null";
                                                        }


                                                        let jsonXt = {
                                                            "fullUrl": "urn:uuid:00000013-0005-0005-0005-000000000002",
                                                            "request": {
                                                                "method": "POST"
                                                            },
                                                            "resource": {
                                                                "resourceType": "Observation",
                                                                "meta": {
                                                                    "profile": [
                                                                        "http://fhir.hie.moh.gov.my/StructureDefinition/Observation-fasting-glucose-my-core"
                                                                    ],
                                                                    "source": "http://provider.hie.moh.gov.my"
                                                                },
                                                                "status": "final",
                                                                "code": {
                                                                    "coding": [
                                                                        {
                                                                            "system": "http://snomed.info/sct",
                                                                            "code": "271062006",
                                                                            "display": "Fasting blood glucose"
                                                                        }
                                                                    ]
                                                                },
                                                                "subject": {
                                                                    "reference": patientId
                                                                },
                                                                "effectiveDateTime": getCurrentTimeInCustomFormat(),
                                                                "issued": getCurrentTimeInCustomFormat(),
                                                                "performer": [
                                                                    {
                                                                        "reference": idFhirDevice,
                                                                        "display": deviceName
                                                                    }
                                                                ],
                                                                "valueQuantity": {
                                                                    "value": xtValValue,
                                                                    "unit": "mmol/L",
                                                                    "system": "http://unitsofmeasure.org",
                                                                    "code": "mmol/L"
                                                                },
                                                                "component": [
                                                                    {
                                                                        "code": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://snomed.info/sct",
                                                                                    "code": "704326004",
                                                                                    "display": "Precondition"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "valueCodeableConcept": {
                                                                            "coding": [
                                                                                {
                                                                                    "system": "http://snomed.info/sct",
                                                                                    "code": xtCode,
                                                                                    "display": xtText
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }




                                                        if (isNumberBetween0And2(xtType) &&
                                                            isValidFormat(xtVal) &&
                                                            xtCode != "null" &&
                                                            xtText != "null"
                                                        ) {

                                                            let memberGlucose = {
                                                                "reference": "Observation/urn:uuid:00000013-0005-0005-0005-000000000002"
                                                            };

                                                            gluHasMember.push(memberGlucose);
                                                            entry.push(jsonXt);
                                                        }



                                                        // Create the FHIR bundle

                                                        let jsonstring = {
                                                            "resourceType": "Bundle",
                                                            "type": "transaction",
                                                            "entry": entry
                                                        }


                                                        jsonstring = JSON.stringify(jsonstring);
                                              - setHeader:
                                                  id: setHeader-a267
                                                  name: payloadType
                                                  expression:
                                                    simple:
                                                      id: simple-f8dd
                                                      expression: OldObservation
                                              - setBody:
                                                  id: setBody-2e25
                                                  expression:
                                                    simple:
                                                      id: simple-19a9
                                                      expression: ${exchangeProperty.observationJson}
                                              - process:
                                                  id: process-c477
                                                  ref: FhirPostMessageProcessor
                                              - choice:
                                                  id: choice-6c73
                                                  when:
                                                    - id: when-35cf
                                                      expression:
                                                        simple:
                                                          id: simple-56d1
                                                          expression: ${header.CamelHttpResponseCode} != 200
                                                      steps:
                                                        - setProperty:
                                                            id: setProperty-2d4a
                                                            name: responseCode
                                                            expression:
                                                              simple:
                                                                id: simple-8662
                                                                expression: ${body}
                                                    - id: when-1e95
                                                      expression:
                                                        simple:
                                                          id: simple-b246
                                                          expression: ${header.CamelHttpResponseCode} == 200
                                                      steps:
                                                        - setProperty:
                                                            id: setProperty-4588
                                                            name: responseCode
                                                            expression:
                                                              simple:
                                                                id: simple-bf94
                                                                expression: ${body}
        - choice:
            id: choice-4990
            when:
              - id: when-ed69
                expression:
                  simple:
                    id: simple-00b5
                    expression: ${header.payloadType} == 'Early'
                steps:
                  - setBody:
                      id: setBody-6f57
                      expression:
                        simple:
                          id: simple-16fc
                          expression: "{\r\n    \"timeLog\": \"${exchangeProperty.timeLog}\",\r\n    \"payloadEarly\" : ${exchangeProperty.payload},\r\n    \"endpoint\" : \"${header.CamelHttpUri}\",\r\n    \"statusCode\": \"${header.CamelHttpResponseCode}\",\r\n    \"responseCode\": ${exchangeProperty.responseCode}\r\n}"
              - id: when-9094
                expression:
                  simple:
                    id: simple-d210
                    expression: ${header.payloadType} == 'NewObservation'
                steps:
                  - setBody:
                      id: setBody-eae3
                      expression:
                        simple:
                          id: simple-bb45
                          expression: "{\r\n    \"timeLog\": \"${exchangeProperty.timeLog}\",\r\n    \"payloadEarly\": ${exchangeProperty.payload},\r\n    \"payloadPatient\": ${exchangeProperty.patientJson},\r\n    \"payloadObservation\": ${exchangeProperty.observationJson},\r\n    \"endpoint\" : \"${header.CamelHttpUri}\",\r\n    \"statusCode\": \"${header.CamelHttpResponseCode}\",\r\n    \"responseCode\": ${exchangeProperty.responseCode}\r\n}"
              - id: when-bebe
                expression:
                  simple:
                    id: simple-89db
                    expression: ${header.payloadType} == 'OldObservation'
                steps:
                  - setBody:
                      id: setBody-87d3
                      expression:
                        simple:
                          id: simple-593d
                          expression: "{\r\n    \"timeLog\": \"${exchangeProperty.timeLog}\",\r\n    \"payloadEarly\": ${exchangeProperty.payload},\r\n    \"payloadObservation\": ${exchangeProperty.observationJson},\r\n    \"endpoint\" : \"${header.CamelHttpUri}\",\r\n    \"statusCode\": \"${header.CamelHttpResponseCode}\",\r\n    \"responseCode\": ${exchangeProperty.responseCode}\r\n}"
              - id: when-cdc4
                expression:
                  simple:
                    id: simple-4f01
                    expression: ${header.payloadType} == 'Patient'
                steps:
                  - setBody:
                      id: setBody-741d
                      expression:
                        simple:
                          id: simple-45f8
                          expression: "{\r\n    \"timeLog\": \"${exchangeProperty.timeLog}\",\r\n    \"payloadEarly\": ${exchangeProperty.payload},\r\n    \"payloadPatient\": ${exchangeProperty.patientJson},\r\n    \"endpoint\" : \"${header.CamelHttpUri}\",\r\n    \"statusCode\": \"${header.CamelHttpResponseCode}\",\r\n    \"responseCode\": ${exchangeProperty.responseCode}\r\n}"
        - setProperty:
            id: setProperty-8918
            name: mongodbUrl
            expression:
              simple:
                id: simple-cd14
                expression: "{{url.mongodb}}"
        - process:
            id: process-21ad
            ref: MongoDbProcessor
        - setBody:
            id: setBody-72cf
            expression:
              simple:
                id: simple-0bf8
                expression: ${exchangeProperty.responseCode}
        - removeHeaders:
            id: removeHeaders-7e30
            pattern: X-Kiosk-Client-*
        - removeHeader:
            id: removeHeader-534d
            name: total
        - removeHeader:
            id: removeHeader-a26e
            name: payloadType
